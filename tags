!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A1	tools/utility/src/util.cpp	63;"	d	file:
A2	tools/utility/src/util.cpp	64;"	d	file:
A3	tools/utility/src/util.cpp	65;"	d	file:
A4	tools/utility/src/util.cpp	66;"	d	file:
A5	tools/utility/src/util.cpp	67;"	d	file:
A6	tools/utility/src/util.cpp	68;"	d	file:
ALLOCATE_GRIDS_AND_THREADS	include/dnn-utility.h	15;"	d
ARRAY_H	tools/utility/include/array.h	10;"	d
ASSERT_NOT_SCALAR	include/arithmetic.h	11;"	d
ASSERT_NOT_SCALAR	include/arithmetic.h	9;"	d
Activation	include/feature-transform.h	/^class Activation : public FeatureTransform {$/;"	c
Activation	src/feature-transform.cpp	/^Activation::Activation() {$/;"	f	class:Activation
Activation	src/feature-transform.cpp	/^Activation::Activation(size_t input_dim, size_t output_dim)$/;"	f	class:Activation
AffineTransform	include/feature-transform.h	/^class AffineTransform : public FeatureTransform {$/;"	c
AffineTransform	src/feature-transform.cpp	/^AffineTransform::AffineTransform(FILE* fid) {$/;"	f	class:AffineTransform
AffineTransform	src/feature-transform.cpp	/^AffineTransform::AffineTransform(const mat& w)$/;"	f	class:AffineTransform
AffineTransform	src/feature-transform.cpp	/^AffineTransform::AffineTransform(size_t input_dim, size_t output_dim)$/;"	f	class:AffineTransform
Arg	tools/utility/include/cmdparser.h	/^            Arg() {}$/;"	f	struct:CmdParser::Arg
Arg	tools/utility/include/cmdparser.h	/^            Arg(string opt, string des, bool o, string darg) {$/;"	f	struct:CmdParser::Arg
Arg	tools/utility/include/cmdparser.h	/^        struct Arg {$/;"	s	class:CmdParser
Array	tools/utility/include/array.h	/^  Array(): _data(0), _size(0), _capacity(0) {$/;"	f	class:Array
Array	tools/utility/include/array.h	/^  Array(const Array<T>& arr) {$/;"	f	class:Array
Array	tools/utility/include/array.h	/^  Array(size_t s) {$/;"	f	class:Array
Array	tools/utility/include/array.h	/^  Array(size_t s, T* ptr) {$/;"	f	class:Array
Array	tools/utility/include/array.h	/^  Array(string filename) {$/;"	f	class:Array
Array	tools/utility/include/array.h	/^class Array {$/;"	c
Array	tools/utility/src/array.cpp	/^template <> Array<string>::Array(size_t s): _data(0), _size(0), _capacity(0) {$/;"	f	class:Array
AskUserForOutputDimension	src/rbm.cpp	/^size_t StackedRbm::AskUserForOutputDimension() {$/;"	f	class:StackedRbm
AutoType	tools/utility/include/cmdparser.h	/^                AutoType(string str): _str(str) {}$/;"	f	class:CmdParser::AutoType
AutoType	tools/utility/include/cmdparser.h	/^        class AutoType {$/;"	c	class:CmdParser
B1	tools/utility/src/util.cpp	70;"	d	file:
B2	tools/utility/src/util.cpp	71;"	d	file:
B3	tools/utility/src/util.cpp	72;"	d	file:
B4	tools/utility/src/util.cpp	73;"	d	file:
B5	tools/utility/src/util.cpp	74;"	d	file:
BERNOULLI	include/dnn-utility.h	/^  BERNOULLI,$/;"	e	enum:UNIT_TYPE
BLUE	tools/utility/include/color.h	7;"	d
BOTON_UTIL_ROOT	Makefile	/^BOTON_UTIL_ROOT=tools\/utility\/$/;"	m
Batch	include/batch.h	/^      Batch(size_t offset, size_t nData): offset(offset), nData(nData) {}$/;"	f	class:Batches::Batch
Batch	include/batch.h	/^  class Batch {$/;"	c	class:Batches
BatchData	include/dataset.h	/^struct BatchData {$/;"	s
Batches	include/batch.h	/^class Batches {$/;"	c
Batches	src/batch.cpp	/^Batches::Batches(size_t batchSize, size_t totalSize):$/;"	f	class:Batches
Batches_mod	include/batch_mod.h	/^  Batches_mod(size_t batchSize, size_t totalSize, string name, DataSet* dataSetPtr) :$/;"	f	class:Batches_mod
Batches_mod	include/batch_mod.h	/^class Batches_mod : public Batches {$/;"	c
C1	tools/utility/src/util.cpp	76;"	d	file:
C2	tools/utility/src/util.cpp	77;"	d	file:
C3	tools/utility/src/util.cpp	78;"	d	file:
C4	tools/utility/src/util.cpp	79;"	d	file:
C5	tools/utility/src/util.cpp	80;"	d	file:
C6	tools/utility/src/util.cpp	81;"	d	file:
CACHE_SIZE	tools/libcumatrix/include/cuda_memory_manager.h	/^  static size_t CACHE_SIZE;$/;"	m	class:CudaMemManager
CACHE_SIZE	tools/libcumatrix/src/cuda_memory_manager.cpp	/^size_t CudaMemManager<T>::CACHE_SIZE = 16 * 1024 * 1024; \/* 16 MBytes *\/$/;"	m	class:CudaMemManager	file:
CACHE_SIZE	tools/utility/tools/libcumatrix/include/cuda_memory_manager.h	/^  static size_t CACHE_SIZE;$/;"	m	class:CudaMemManager
CACHE_SIZE	tools/utility/tools/libcumatrix/src/cuda_memory_manager.cpp	/^size_t CudaMemManager<T>::CACHE_SIZE = 16 * 1024 * 1024; \/* 16 MBytes *\/$/;"	m	class:CudaMemManager	file:
CC	Makefile	/^CC=gcc$/;"	m
CC	tools/libcumatrix/Makefile	/^CC=gcc$/;"	m
CC	tools/utility/Makefile	/^CC=g++ -Wall$/;"	m
CC	tools/utility/tools/libcumatrix/Makefile	/^CC=gcc$/;"	m
CCE	tools/libcumatrix/include/cuda_memory_manager.h	11;"	d
CCE	tools/libcumatrix/include/device_matrix.h	17;"	d
CCE	tools/utility/tools/libcumatrix/include/cuda_memory_manager.h	11;"	d
CCE	tools/utility/tools/libcumatrix/include/device_matrix.h	17;"	d
CFLAGS	Makefile	/^CFLAGS=$/;"	m
CFLAGS	tools/libcumatrix/Makefile	/^CFLAGS=$/;"	m
CFLAGS	tools/utility/Makefile	/^CFLAGS=$/;"	m
CFLAGS	tools/utility/tools/libcumatrix/Makefile	/^CFLAGS=$/;"	m
CNN	include/cnn.h	/^class CNN {$/;"	c
CNN	src/cnn.cpp	/^CNN::CNN(): _transforms() {$/;"	f	class:CNN
CNN	src/cnn.cpp	/^CNN::CNN(const string& model_fn) : _transforms() {$/;"	f	class:CNN
COLOREND	tools/utility/include/color.h	10;"	d
CPPFLAGS	Makefile	/^CPPFLAGS= -std=c++0x $(CFLAGS) $(INCLUDE) -Ofast #-Werror -Wall$/;"	m
CPPFLAGS	tools/libcumatrix/Makefile	/^CPPFLAGS= -std=c++0x $(CFLAGS) $(INCLUDE) -Ofast$/;"	m
CPPFLAGS	tools/utility/Makefile	/^CPPFLAGS=$(CFLAGS) $(INCLUDE)$/;"	m
CPPFLAGS	tools/utility/tools/libcumatrix/Makefile	/^CPPFLAGS= -std=c++0x $(CFLAGS) $(INCLUDE)$/;"	m
CROSS_ENTROPY	include/utility.h	/^  CROSS_ENTROPY$/;"	e	enum:ERROR_MEASURE
CUBLAS_HANDLE	tools/libcumatrix/include/device_matrix.h	/^  CUBLAS_HANDLE()  { CCE(cublasCreate(&_handle)); }$/;"	f	class:CUBLAS_HANDLE
CUBLAS_HANDLE	tools/libcumatrix/include/device_matrix.h	/^class CUBLAS_HANDLE {$/;"	c
CUBLAS_HANDLE	tools/utility/tools/libcumatrix/include/device_matrix.h	/^  CUBLAS_HANDLE()  { CCE(cublasCreate(&_handle)); }$/;"	f	class:CUBLAS_HANDLE
CUBLAS_HANDLE	tools/utility/tools/libcumatrix/include/device_matrix.h	/^class CUBLAS_HANDLE {$/;"	c
CUDA_INCLUDE	tools/libcumatrix/Makefile	/^CUDA_INCLUDE=$(INCLUDE) \\$/;"	m
CUDA_INCLUDE	tools/utility/tools/libcumatrix/Makefile	/^CUDA_INCLUDE=$(INCLUDE) \\$/;"	m
CUDA_LIBRARY	Makefile	/^CUDA_LIBRARY=-lcuda -lcudart -lcublas$/;"	m
CUDA_ROOT	tools/libcumatrix/Makefile	/^CUDA_ROOT=\/usr\/local\/cuda$/;"	m
CUDA_ROOT	tools/utility/tools/libcumatrix/Makefile	/^CUDA_ROOT=\/usr\/local\/cuda$/;"	m
CUMATRIX_ROOT	Makefile	/^CUMATRIX_ROOT=tools\/libcumatrix\/$/;"	m
CURAND_STATE	include/dnn-utility.h	/^class CURAND_STATE {$/;"	c
CURAND_STATE	src/dnn-utility.cu	/^CURAND_STATE::CURAND_STATE(unsigned seed, int N): _states(NULL) {$/;"	f	class:CURAND_STATE
CXX	Makefile	/^CXX=g++$/;"	m
CXX	tools/libcumatrix/Makefile	/^CXX=g++$/;"	m
CXX	tools/utility/Makefile	/^CXX=g++ -Wall$/;"	m
CXX	tools/utility/tools/libcumatrix/Makefile	/^CXX=g++-4.6$/;"	m
CYAN	tools/utility/include/color.h	9;"	d
CmdParser	tools/utility/include/cmdparser.h	/^        CmdParser(int argc, char** argv): _argc(argc), _argv(argv), _usage(""), _options(""), _add_counter(0) {$/;"	f	class:CmdParser
CmdParser	tools/utility/include/cmdparser.h	/^class CmdParser {$/;"	c
Config	include/config.h	/^struct Config {$/;"	s
Config	src/config.cpp	/^Config::Config():$/;"	f	class:Config
ConvolutionalLayer	include/cnn.h	/^class ConvolutionalLayer : public MIMOFeatureTransform {$/;"	c
ConvolutionalLayer	src/cnn.cpp	/^ConvolutionalLayer::ConvolutionalLayer(size_t nInputs, size_t nOutputs, int h, int w)$/;"	f	class:ConvolutionalLayer
CudaMemManager	tools/libcumatrix/include/cuda_memory_manager.h	/^  CudaMemManager(): _total_byte_allocated(0) { \/* Nothing to do *\/ }$/;"	f	class:CudaMemManager
CudaMemManager	tools/libcumatrix/include/cuda_memory_manager.h	/^class CudaMemManager {$/;"	c
CudaMemManager	tools/utility/tools/libcumatrix/include/cuda_memory_manager.h	/^  CudaMemManager(): _total_byte_allocated(0) { \/* Nothing to do *\/ }$/;"	f	class:CudaMemManager
CudaMemManager	tools/utility/tools/libcumatrix/include/cuda_memory_manager.h	/^class CudaMemManager {$/;"	c
D1	tools/utility/src/util.cpp	83;"	d	file:
D2	tools/utility/src/util.cpp	84;"	d	file:
D3	tools/utility/src/util.cpp	85;"	d	file:
D4	tools/utility/src/util.cpp	86;"	d	file:
DEBUG_STR	src/cnn-utility.cu	17;"	d	file:
DNN	include/dnn.h	/^class DNN {$/;"	c
DNN	src/dnn.cpp	/^DNN::DNN(): _transforms(), _config(), _composite_net_flag(false) {} \/\/Modified$/;"	f	class:DNN
DNN	src/dnn.cpp	/^DNN::DNN(const Config& config): _transforms(), _config(config), _composite_net_flag(false) { \/\/Modified$/;"	f	class:DNN
DNN	src/dnn.cpp	/^DNN::DNN(const DNN& source): _transforms(source._transforms.size()), _config(), _composite_net_flag(false) { \/\/Modified$/;"	f	class:DNN
DNN	src/dnn.cpp	/^DNN::DNN(string fn): _transforms(), _config(), _composite_net_flag(false) { \/\/Modified$/;"	f	class:DNN
DNNGraph	include/dnn-graph.h	/^class DNNGraph {$/;"	c
DNNGraph	src/dnn-graph.cpp	/^DNNGraph::DNNGraph() : _node_in("NODE_IN", NULL_NET), _node_out("NODE_OUT", NULL_NET) {$/;"	f	class:DNNGraph
DataSet	include/dataset.h	/^class DataSet {$/;"	c
DataSet	src/dataset.cpp	/^DataSet::DataSet(): _normalizer(NULL) {$/;"	f	class:DataSet
DataSet	src/dataset.cpp	/^DataSet::DataSet(const DataSet& src)$/;"	f	class:DataSet
DataSet	src/dataset.cpp	/^DataSet::DataSet(const string &fn, size_t dim, int base, size_t start, size_t end)$/;"	f	class:DataSet
DataSheet	tools/utility/include/matrix.h	/^    DataSheet(): Matrix2D<T>() {}$/;"	f	class:DataSheet
DataSheet	tools/utility/include/matrix.h	/^    DataSheet(const DataSheet<T>& source): Matrix2D<T>(source) {}$/;"	f	class:DataSheet
DataSheet	tools/utility/include/matrix.h	/^    DataSheet(int rows, int cols): Matrix2D<T>(rows, cols) {}$/;"	f	class:DataSheet
DataSheet	tools/utility/include/matrix.h	/^    DataSheet(string filename, int max_rows = 0, int max_cols = 0): Matrix2D<T>(filename, max_rows, max_cols) {}$/;"	f	class:DataSheet
DataSheet	tools/utility/include/matrix.h	/^class DataSheet: public Matrix2D<T> {$/;"	c
DataStream	include/dataset.h	/^class DataStream {$/;"	c
DataStream	src/dataset.cpp	/^DataStream::DataStream(): _nLines(0), _line_number(0), _start(0), _end(-1) {$/;"	f	class:DataStream
DataStream	src/dataset.cpp	/^DataStream::DataStream(const DataStream& src) : _nLines(src._nLines),$/;"	f	class:DataStream
DataStream	src/dataset.cpp	/^DataStream::DataStream(const string& filename, size_t start, size_t end) : _nLines(0) {$/;"	f	class:DataStream
ERROR_MEASURE	include/utility.h	/^enum ERROR_MEASURE {$/;"	g
EXAMPLE_PROGRAM	tools/libcumatrix/Makefile	/^EXAMPLE_PROGRAM=benchmark example1 example2$/;"	m
EXAMPLE_PROGRAM	tools/utility/tools/libcumatrix/Makefile	/^EXAMPLE_PROGRAM=benchmark example1 example2$/;"	m
EXECUTABLES	Makefile	/^EXECUTABLES:=$(addprefix bin\/, $(EXECUTABLES))$/;"	m
EXECUTABLES	Makefile	/^EXECUTABLES=dnn-train-graph\\$/;"	m
EXECUTABLES	tools/libcumatrix/Makefile	/^EXECUTABLES=$/;"	m
EXECUTABLES	tools/utility/tools/libcumatrix/Makefile	/^EXECUTABLES=$/;"	m
FeatureTransform	include/feature-transform.h	/^  FeatureTransform() { }$/;"	f	class:FeatureTransform
FeatureTransform	include/feature-transform.h	/^class FeatureTransform {$/;"	c
FeatureTransform	src/feature-transform.cpp	/^FeatureTransform::FeatureTransform(size_t input_dim, size_t output_dim)$/;"	f	class:FeatureTransform
GAUSSIAN	include/dnn-utility.h	/^  GAUSSIAN$/;"	e	enum:UNIT_TYPE
GREEN	tools/utility/include/color.h	5;"	d
GetMinor	tools/utility/src/matrix.cpp	/^int Matrix2D<T>::GetMinor(const Matrix2D<T>& src, Matrix2D<T>& dest, size_t row, size_t col)$/;"	f	class:Matrix2D
HAVE_THRUST_DEVICE_VECTOR_H	tools/libcumatrix/include/device_math.h	8;"	d
HAVE_THRUST_DEVICE_VECTOR_H	tools/libcumatrix/include/device_vector_operators.h	9;"	d
HAVE_THRUST_DEVICE_VECTOR_H	tools/utility/tools/libcumatrix/include/device_math.h	8;"	d
HAVE_THRUST_DEVICE_VECTOR_H	tools/utility/tools/libcumatrix/include/device_vector_operators.h	9;"	d
INCLUDE	Makefile	/^INCLUDE= -I include\/ \\$/;"	m
INCLUDE	tools/libcumatrix/Makefile	/^INCLUDE= -I include\/\\$/;"	m
INCLUDE	tools/utility/Makefile	/^INCLUDE=-I include\/$/;"	m
INCLUDE	tools/utility/tools/libcumatrix/Makefile	/^INCLUDE= -I include\/\\$/;"	m
L2ERROR	include/utility.h	/^  L2ERROR,  \/* for binary-classification only *\/$/;"	e	enum:ERROR_MEASURE
L2_penalty	include/rbm.h	/^  static const float initial_momentum, final_momentum, L2_penalty;$/;"	m	class:StackedRbm
L2_penalty	src/rbm.cpp	/^const float StackedRbm::L2_penalty = 0.0002;$/;"	m	class:StackedRbm	file:
LIBRARY	Makefile	/^LIBRARY=-lpbar -lcumatrix$/;"	m
LIBRARY	tools/libcumatrix/Makefile	/^LIBRARY= -lcuda -lcublas -lcudart$/;"	m
LIBRARY	tools/utility/tools/libcumatrix/Makefile	/^LIBRARY= -lcuda -lcublas -lcudart$/;"	m
LIBRARY_PATH	Makefile	/^LIBRARY_PATH=-L$(BOTON_UTIL_ROOT)\/lib\/ -L$(CUMATRIX_ROOT)\/lib -L\/usr\/local\/cuda\/lib64$/;"	m
LIBRARY_PATH	tools/libcumatrix/Makefile	/^LIBRARY_PATH=-L$(CUDA_ROOT)\/lib64\/$/;"	m
LIBRARY_PATH	tools/utility/tools/libcumatrix/Makefile	/^LIBRARY_PATH=-L$(CUDA_ROOT)\/lib64\/$/;"	m
LIBS	tools/utility/Makefile	/^LIBS:=libutil.a libarray.a libmatrix.a libprofile.a libpbar.a$/;"	m
LINEAR_SCALING	include/dataset.h	/^  LINEAR_SCALING,$/;"	e	enum:NormType
MAX	tools/utility/include/util.h	14;"	d
MAX_BAR_LENGTH	tools/utility/include/pbar.h	/^    const static size_t MAX_BAR_LENGTH = 64;$/;"	m	class:ProgressBar
MAX_BUFFER_LENGTH	tools/utility/include/matrix.h	7;"	d
MAX_DEVIATION	tools/utility/src/util.cpp	92;"	d	file:
MAX_SHARED_MEMORY_SIZE	src/cnn-utility.cu	18;"	d	file:
MIMOFeatureTransform	include/cnn.h	/^  MIMOFeatureTransform(size_t n_input_maps, size_t n_output_maps):$/;"	f	class:MIMOFeatureTransform
MIMOFeatureTransform	include/cnn.h	/^class MIMOFeatureTransform {$/;"	c
MIN	tools/utility/include/util.h	15;"	d
Matrix2D	tools/utility/include/matrix.h	/^    template <typename S> Matrix2D(const Matrix2D<S>& mat): _element(NULL) { *this = mat; }$/;"	f	class:Matrix2D
Matrix2D	tools/utility/include/matrix.h	/^class Matrix2D {$/;"	c
Matrix2D	tools/utility/src/matrix.cpp	/^Matrix2D<T>::Matrix2D(): _element(NULL) {$/;"	f	class:Matrix2D
Matrix2D	tools/utility/src/matrix.cpp	/^Matrix2D<T>::Matrix2D(const Matrix2D<T>& mat): _element(NULL) {$/;"	f	class:Matrix2D
Matrix2D	tools/utility/src/matrix.cpp	/^Matrix2D<T>::Matrix2D(int rows, int cols): _element(NULL) {$/;"	f	class:Matrix2D
Matrix2D	tools/utility/src/matrix.cpp	/^Matrix2D<T>::Matrix2D(string filename, int max_rows, int max_cols): _element(NULL) {$/;"	f	class:Matrix2D
MemList	tools/libcumatrix/include/cuda_memory_manager.h	/^  MemList(): hits(0), hit_rate(0) {}$/;"	f	struct:MemList
MemList	tools/libcumatrix/include/cuda_memory_manager.h	/^struct MemList {$/;"	s
MemList	tools/utility/tools/libcumatrix/include/cuda_memory_manager.h	/^  MemList(): hits(0), hit_rate(0) {}$/;"	f	struct:MemList
MemList	tools/utility/tools/libcumatrix/include/cuda_memory_manager.h	/^struct MemList {$/;"	s
MemPool	tools/libcumatrix/include/cuda_memory_manager.h	/^struct MemPool {$/;"	s
MemPool	tools/utility/tools/libcumatrix/include/cuda_memory_manager.h	/^struct MemPool {$/;"	s
MyException	tools/utility/include/util.h	/^      MyException() {}; \/\/ not meant to be called$/;"	f	class:util::MyException
MyException	tools/utility/include/util.h	/^      MyException(string strError): m_strError(strError) {}$/;"	f	class:util::MyException
MyException	tools/utility/include/util.h	/^  class MyException {$/;"	c	namespace:util
MyVector	tools/utility/include/vector.h	/^    MyVector(): Array<T>() {}$/;"	f	class:MyVector
MyVector	tools/utility/include/vector.h	/^    MyVector(const MyVector<T>& source): Array<T>(source) {}$/;"	f	class:MyVector
MyVector	tools/utility/include/vector.h	/^    MyVector(const std::vector<T>& source) {$/;"	f	class:MyVector
MyVector	tools/utility/include/vector.h	/^    MyVector(size_t n): Array<T>(n) {}$/;"	f	class:MyVector
MyVector	tools/utility/include/vector.h	/^    MyVector(size_t n, T* ptr): Array<T>(n, ptr) {}$/;"	f	class:MyVector
MyVector	tools/utility/include/vector.h	/^class MyVector : public Array<T> {$/;"	c
NO_NORMALIZATION	include/dataset.h	/^  NO_NORMALIZATION,$/;"	e	enum:NormType
NULL_NET	include/dnn-graph.h	8;"	d
NVCC	Makefile	/^NVCC=nvcc -w #-Xcompiler "-Wall"$/;"	m
NVCC	tools/libcumatrix/Makefile	/^NVCC=nvcc -w$/;"	m
NVCC	tools/utility/tools/libcumatrix/Makefile	/^NVCC=nvcc -arch=sm_21 -w$/;"	m
NVCCFLAGS	Makefile	/^NVCCFLAGS= $(CFLAGS) -O3 \\$/;"	m
NVCCFLAGS	tools/libcumatrix/Makefile	/^NVCCFLAGS= $(CFLAGS) -O3 \\$/;"	m
NV_DEVICE_WARP_SIZE	include/dnn-utility.h	13;"	d
Node	include/dnn-graph.h	/^  Node() {}$/;"	f	class:Node
Node	include/dnn-graph.h	/^class Node {$/;"	c
Node	src/dnn-graph.cpp	/^Node::Node(const Node& source) {$/;"	f	class:Node
Node	src/dnn-graph.cpp	/^Node::Node(string name, DNN* net): _seen(false), _name(name), _net(net), _objectiveWeight(1) {$/;"	f	class:Node
Node	src/dnn-graph.cpp	/^Node::Node(string name, DNN* net, Node* in): _seen(false), _name(name), _net(net), _objectiveWeight(1) {$/;"	f	class:Node
NormType	include/dataset.h	/^enum NormType {$/;"	g
Normalization	include/dataset.h	/^class Normalization {$/;"	c
OBJ	Makefile	/^OBJ:=$(addprefix obj\/, $(addsuffix .o,$(basename $(SOURCES))))$/;"	m
OBJ	tools/libcumatrix/Makefile	/^OBJ=obj\/device_matrix.o obj\/cuda_memory_manager.o$/;"	m
OBJ	tools/utility/Makefile	/^OBJ=$(addprefix obj\/, $(OBJ_TEMP:.c=.o))$/;"	m
OBJ	tools/utility/tools/libcumatrix/Makefile	/^OBJ=obj\/device_matrix.o obj\/cuda_memory_manager.o$/;"	m
OBJ_TEMP	tools/utility/Makefile	/^OBJ_TEMP=$(SOURCES:.cpp=.o)$/;"	m
ORANGE	tools/utility/include/color.h	6;"	d
Operation	include/dnn-utility.h	/^typedef void (*Operation)(float&, curandState*);$/;"	t
PADDING_RIGHT	tools/utility/include/cmdparser.h	/^            static const size_t PADDING_RIGHT = 24;$/;"	m	struct:CmdParser::Arg
PAUSE	include/utility.h	28;"	d
PAUSE	include/utility.h	33;"	d
PI	tools/libcumatrix/include/math_ext.h	5;"	d
PI	tools/utility/include/util.h	16;"	d
PI	tools/utility/tools/libcumatrix/include/math_ext.h	5;"	d
PURPLE	tools/utility/include/color.h	8;"	d
P_HIGH	tools/utility/src/util.cpp	90;"	d	file:
P_LOW	tools/utility/src/util.cpp	88;"	d	file:
Profile	tools/utility/include/profile.h	/^class Profile {$/;"	c
ProgressBar	tools/utility/include/pbar.h	/^class ProgressBar {$/;"	c
ProgressBar	tools/utility/src/pbar.cpp	/^ProgressBar::ProgressBar(string status) {$/;"	f	class:ProgressBar
RED	tools/utility/include/color.h	4;"	d
RED_ERROR	include/utility.h	19;"	d
SCALAR_MEMORY_BUFFER	tools/libcumatrix/include/device_matrix.h	/^  SCALAR_MEMORY_BUFFER(): _ptr(NULL) {$/;"	f	class:SCALAR_MEMORY_BUFFER
SCALAR_MEMORY_BUFFER	tools/libcumatrix/include/device_matrix.h	/^class SCALAR_MEMORY_BUFFER {$/;"	c
SCALAR_MEMORY_BUFFER	tools/utility/tools/libcumatrix/include/device_matrix.h	/^  SCALAR_MEMORY_BUFFER(): _ptr(NULL) {$/;"	f	class:SCALAR_MEMORY_BUFFER
SCALAR_MEMORY_BUFFER	tools/utility/tools/libcumatrix/include/device_matrix.h	/^class SCALAR_MEMORY_BUFFER {$/;"	c
SIZE	include/cnn-utility.h	/^  SIZE(): m(0), n(0) {}$/;"	f	struct:SIZE
SIZE	include/cnn-utility.h	/^  SIZE(size_t m, size_t n): m(m), n(n) {}$/;"	f	struct:SIZE
SIZE	include/cnn-utility.h	/^struct SIZE {$/;"	s
SOURCES	Makefile	/^SOURCES=cnn-utility.cu\\$/;"	m
SOURCES	tools/utility/Makefile	/^SOURCES=$(patsubst src\/%, %, $(wildcard src\/*.cpp) $(wildcard src\/*.c))$/;"	m
STANDARD_SCORE	include/dataset.h	/^  STANDARD_SCORE$/;"	e	enum:NormType
Sigmoid	include/feature-transform.h	/^class Sigmoid : public Activation {$/;"	c
Sigmoid	src/feature-transform.cpp	/^Sigmoid::Sigmoid(FILE* fid) {$/;"	f	class:Sigmoid
Sigmoid	src/feature-transform.cpp	/^Sigmoid::Sigmoid(size_t input_dim, size_t output_dim)$/;"	f	class:Sigmoid
Softmax	include/feature-transform.h	/^class Softmax : public Activation {$/;"	c
Softmax	src/feature-transform.cpp	/^Softmax::Softmax(FILE* fid) {$/;"	f	class:Softmax
Softmax	src/feature-transform.cpp	/^Softmax::Softmax(size_t input_dim, size_t output_dim)$/;"	f	class:Softmax
StackedRbm	include/rbm.h	/^class StackedRbm {$/;"	c
StackedRbm	src/rbm.cpp	/^StackedRbm::StackedRbm(UNIT_TYPE vis_type, const vector<size_t>& dims,$/;"	f	class:StackedRbm
StandardScore	include/dataset.h	/^class StandardScore : public Normalization {$/;"	c
StandardScore	src/dataset.cpp	/^StandardScore::StandardScore() {}$/;"	f	class:StandardScore
StandardScore	src/dataset.cpp	/^StandardScore::StandardScore(const StandardScore& src):$/;"	f	class:StandardScore
SubSamplingLayer	include/cnn.h	/^class SubSamplingLayer : public MIMOFeatureTransform {$/;"	c
SubSamplingLayer	src/cnn.cpp	/^SubSamplingLayer::SubSamplingLayer(size_t m, size_t n, size_t scale)$/;"	f	class:SubSamplingLayer
T	tools/libcumatrix/src/device_matrix.cu	/^device_matrix<T>::operator thrust::device_vector<T>() const {$/;"	f
T	tools/utility/tools/libcumatrix/src/device_matrix.cu	/^device_matrix<T>::operator thrust::device_vector<T>() const {$/;"	f
Timer	include/perf.h	/^      Timer(): timer(NULL) { sdkCreateTimer(&timer); }$/;"	f	class:perf::Timer
Timer	include/perf.h	/^  class Timer {$/;"	c	namespace:perf
Timer	tools/libcumatrix/benchmark.cpp	/^Timer::Timer() {$/;"	f	class:Timer
Timer	tools/libcumatrix/benchmark.cpp	/^struct Timer {$/;"	s	file:
Timer	tools/utility/include/perf.h	/^      Timer(): timer(NULL) { sdkCreateTimer(&timer); }$/;"	f	class:perf::Timer
Timer	tools/utility/include/perf.h	/^  class Timer {$/;"	c	namespace:perf
Timer	tools/utility/tools/libcumatrix/benchmark.cpp	/^Timer::Timer() {$/;"	f	class:Timer
Timer	tools/utility/tools/libcumatrix/benchmark.cpp	/^struct Timer {$/;"	s	file:
TrainConfig	src/dnn-train-graph.cpp	/^struct TrainConfig {$/;"	s	file:
Transposed	tools/libcumatrix/include/device_matrix.h	/^      Transposed(const device_matrix<T>& m): _m(m) {}$/;"	f	class:device_matrix::Transposed
Transposed	tools/libcumatrix/include/device_matrix.h	/^  class Transposed {$/;"	c	class:device_matrix
Transposed	tools/utility/tools/libcumatrix/include/device_matrix.h	/^      Transposed(const device_matrix<T>& m): _m(m) {}$/;"	f	class:device_matrix::Transposed
Transposed	tools/utility/tools/libcumatrix/include/device_matrix.h	/^  class Transposed {$/;"	c	class:device_matrix
UNIT_TYPE	include/dnn-utility.h	/^enum UNIT_TYPE {$/;"	g
VECTOR	include/arithmetic.h	24;"	d
VECTOR	include/arithmetic.h	28;"	d
VECTOR	tools/libcumatrix/include/device_vector_operators.h	14;"	d
VECTOR	tools/libcumatrix/include/device_vector_operators.h	18;"	d
VECTOR	tools/utility/tools/libcumatrix/include/device_vector_operators.h	14;"	d
VECTOR	tools/utility/tools/libcumatrix/include/device_vector_operators.h	18;"	d
WHERE	include/arithmetic.h	25;"	d
WHERE	include/arithmetic.h	29;"	d
WHERE	include/dnn-utility.h	11;"	d
WHERE	tools/libcumatrix/include/device_vector_operators.h	15;"	d
WHERE	tools/libcumatrix/include/device_vector_operators.h	19;"	d
WHERE	tools/utility/tools/libcumatrix/include/device_vector_operators.h	15;"	d
WHERE	tools/utility/tools/libcumatrix/include/device_vector_operators.h	19;"	d
YELLOW_WARNING	include/utility.h	23;"	d
ZeroOne	include/dataset.h	/^class ZeroOne : public Normalization {$/;"	c
ZeroOne	src/dataset.cpp	/^ZeroOne::ZeroOne() {}$/;"	f	class:ZeroOne
ZeroOne	src/dataset.cpp	/^ZeroOne::ZeroOne(const ZeroOne& src): _min(src._min), _max(src._max) {}$/;"	f	class:ZeroOne
_CMD_PARSER_H	tools/utility/include/cmdparser.h	2;"	d
_COLOR_H	tools/utility/include/color.h	2;"	d
_DNN_UTILITY_H_	include/dnn-utility.h	2;"	d
_FEATURE_TRANSFORM_H_	include/feature-transform.h	2;"	d
_MATRIX_2D_H	tools/utility/include/matrix.h	2;"	d
_MY_VECTOR_H	tools/utility/include/vector.h	2;"	d
_PROFILE_H_	tools/utility/include/profile.h	2;"	d
_PROGRESS_BAR_H_	tools/utility/include/pbar.h	2;"	d
_STATISTIC_H	tools/utility/include/util.h	2;"	d
__BATCH_H_	include/batch.h	2;"	d
__BATCH_MOD_H_	include/batch_mod.h	2;"	d
__CONFIG_H_	include/config.h	2;"	d
__CUDA_CONSTANTS__	src/cnn-utility.cu	20;"	d	file:
__CUDA_MEMORY_MANAGER_H_	tools/libcumatrix/include/cuda_memory_manager.h	2;"	d
__CUDA_MEMORY_MANAGER_H_	tools/utility/tools/libcumatrix/include/cuda_memory_manager.h	2;"	d
__DATASET_H_	include/dataset.h	2;"	d
__DEVICE_BLAS_H_	tools/libcumatrix/include/device_arithmetic.h	2;"	d
__DEVICE_BLAS_H_	tools/utility/tools/libcumatrix/include/device_arithmetic.h	2;"	d
__DEVICE_MATH_EXT_H_	tools/libcumatrix/include/device_math.h	2;"	d
__DEVICE_MATH_EXT_H_	tools/utility/tools/libcumatrix/include/device_math.h	2;"	d
__DEVICE_MATRIX_H__	tools/libcumatrix/include/device_matrix.h	2;"	d
__DEVICE_MATRIX_H__	tools/utility/tools/libcumatrix/include/device_matrix.h	2;"	d
__DNN_GRAPH_H_	include/dnn-graph.h	2;"	d
__DNN_H_	include/dnn.h	2;"	d
__HOST_MATRIX_H_	include/host_matrix.h	2;"	d
__MATH_EXT_H_	tools/libcumatrix/include/math_ext.h	2;"	d
__MATH_EXT_H_	tools/utility/tools/libcumatrix/include/math_ext.h	2;"	d
__PERF_H_	include/perf.h	2;"	d
__PERF_H_	tools/utility/include/perf.h	2;"	d
__RBM_H_	include/rbm.h	2;"	d
__UTILITY_H_	include/utility.h	2;"	d
__UTIL_SORTING_H_	tools/utility/include/sorting.h	2;"	d
__VECTOR_BLAS_H__	include/arithmetic.h	2;"	d
_add_counter	tools/utility/include/cmdparser.h	/^        size_t _add_counter; \/\/modified$/;"	m	class:CmdParser
_appendUsage	tools/utility/include/cmdparser.h	/^        void _appendUsage(bool optional, string option) {$/;"	f	class:CmdParser
_argc	tools/utility/include/cmdparser.h	/^        int _argc;$/;"	m	class:CmdParser
_arguments	tools/utility/include/cmdparser.h	/^        map<string, Arg> _arguments;$/;"	m	class:CmdParser
_argv	tools/utility/include/cmdparser.h	/^        char** _argv;$/;"	m	class:CmdParser
_base	include/dataset.h	/^  int _base;$/;"	m	class:DataSet
_batch	include/batch.h	/^      Batch* _batch;$/;"	m	class:Batches::iterator
_batchSize	include/batch.h	/^      size_t _batchSize;$/;"	m	class:Batches::iterator
_batchSize	include/batch.h	/^  size_t _batchSize;$/;"	m	class:Batches
_begin	include/batch.h	/^  iterator _begin;$/;"	m	class:Batches
_begin	include/batch_mod.h	/^  iterator _begin;$/;"	m	class:Batches_mod
_bias	include/cnn.h	/^  vector<float> _bias;$/;"	m	class:ConvolutionalLayer
_byte_allocated	tools/libcumatrix/include/cuda_memory_manager.h	/^  std::map<T*, size_t> _byte_allocated;$/;"	m	class:CudaMemManager
_byte_allocated	tools/utility/tools/libcumatrix/include/cuda_memory_manager.h	/^  std::map<T*, size_t> _byte_allocated;$/;"	m	class:CudaMemManager
_calcSuitableCapacity	tools/utility/include/array.h	/^  static size_t _calcSuitableCapacity(size_t s) {$/;"	f	class:Array
_capacity	include/host_matrix.h	/^  size_t _capacity;$/;"	m	class:host_matrix
_capacity	tools/libcumatrix/include/device_matrix.h	/^  size_t _capacity;$/;"	m	class:device_matrix
_capacity	tools/utility/include/array.h	/^    size_t       _capacity;   \/\/ max number of elements$/;"	m	class:Array
_capacity	tools/utility/tools/libcumatrix/include/device_matrix.h	/^  size_t _capacity;$/;"	m	class:device_matrix
_cols	include/host_matrix.h	/^  size_t _cols;$/;"	m	class:host_matrix
_cols	tools/libcumatrix/include/device_matrix.h	/^  size_t _cols;$/;"	m	class:device_matrix
_cols	tools/libcumatrix/src/device_matrix.cu	/^  _capacity(_rows * _cols),$/;"	v
_cols	tools/utility/include/matrix.h	/^    size_t _cols;$/;"	m	class:Matrix2D
_cols	tools/utility/tools/libcumatrix/include/device_matrix.h	/^  size_t _cols;$/;"	m	class:device_matrix
_cols	tools/utility/tools/libcumatrix/src/device_matrix.cu	/^  _capacity(_rows * _cols),$/;"	v
_composite_net_flag	include/dnn.h	/^  bool _composite_net_flag; \/\/New$/;"	m	class:DNN
_config	include/dnn-graph.h	/^  Config _config;$/;"	m	class:DNNGraph
_config	include/dnn.h	/^  Config _config;$/;"	m	class:DNN
_cuda_stream	tools/libcumatrix/include/device_matrix.h	/^  static cudaStream_t _cuda_stream;$/;"	m	class:device_matrix
_cuda_stream	tools/libcumatrix/src/device_matrix.cu	/^cudaStream_t device_matrix<T>::_cuda_stream = 0;$/;"	m	class:T	file:
_cuda_stream	tools/utility/tools/libcumatrix/include/device_matrix.h	/^  static cudaStream_t _cuda_stream;$/;"	m	class:device_matrix
_cuda_stream	tools/utility/tools/libcumatrix/src/device_matrix.cu	/^cudaStream_t device_matrix<T>::_cuda_stream = 0;$/;"	m	class:T	file:
_data	include/host_matrix.h	/^  T* _data;$/;"	m	class:host_matrix
_data	tools/libcumatrix/include/device_matrix.h	/^  T* _data;$/;"	m	class:device_matrix
_data	tools/libcumatrix/src/device_matrix.cu	/^  _data(NULL) {$/;"	f
_data	tools/utility/include/array.h	/^    T*           _data;$/;"	m	class:Array
_data	tools/utility/tools/libcumatrix/include/device_matrix.h	/^  T* _data;$/;"	m	class:device_matrix
_data	tools/utility/tools/libcumatrix/src/device_matrix.cu	/^  _data(NULL) {$/;"	f
_dataSetPtr	include/batch_mod.h	/^    DataSet* _dataSetPtr;$/;"	m	class:Batches_mod::iterator
_dataSetPtr	include/batch_mod.h	/^  DataSet* _dataSetPtr;$/;"	m	class:Batches_mod
_defaultArgStr	tools/utility/include/cmdparser.h	/^            string _defaultArgStr() const {$/;"	f	struct:CmdParser::Arg
_dev	include/dataset.h	/^  vector<double> _dev;$/;"	m	class:StandardScore
_dim	include/dataset.h	/^  size_t _dim;$/;"	m	class:DataSet
_dims	include/rbm.h	/^  vector<size_t> _dims;$/;"	m	class:StackedRbm
_element	tools/utility/include/matrix.h	/^    T** _element;$/;"	m	class:Matrix2D
_end	include/batch.h	/^  iterator _end;$/;"	m	class:Batches
_end	include/batch_mod.h	/^  iterator _end;$/;"	m	class:Batches_mod
_end	include/dataset.h	/^  size_t _start, _end;$/;"	m	class:DataStream
_error	include/dnn-graph.h	/^  mat           _error;$/;"	m	class:Node
_fanin	include/dnn-graph.h	/^  vector<Node*> _fanin,$/;"	m	class:Node
_fanout	include/dnn-graph.h	/^                _fanout;$/;"	m	class:Node
_filename	include/dataset.h	/^  string _filename;$/;"	m	class:DataStream
_fin	include/dnn-graph.h	/^  mat           _fin;$/;"	m	class:Node
_fs	include/dataset.h	/^  ifstream _fs;$/;"	m	class:DataStream
_handle	tools/libcumatrix/include/device_matrix.h	/^  cublasHandle_t _handle;$/;"	m	class:CUBLAS_HANDLE
_handle	tools/utility/tools/libcumatrix/include/device_matrix.h	/^  cublasHandle_t _handle;$/;"	m	class:CUBLAS_HANDLE
_hout	include/dnn-graph.h	/^  mat           _hout;$/;"	m	class:Node
_houts	include/cnn.h	/^  std::vector<vector<mat> > _houts;$/;"	m	class:CNN
_houts	include/dnn.h	/^  std::vector<mat> _houts;$/;"	m	class:DNN
_init	tools/utility/include/array.h	/^  void _init(size_t s) {$/;"	f	class:Array
_input_dim	include/feature-transform.h	/^  size_t _input_dim;$/;"	m	class:FeatureTransform
_input_img_size	include/cnn.h	/^  SIZE _input_img_size;$/;"	m	class:MIMOFeatureTransform
_kernels	include/cnn.h	/^  vector<vector<mat> > _kernels;$/;"	m	class:ConvolutionalLayer
_key	tools/utility/include/util.h	/^      T1 _key;$/;"	m	class:util::kvPair
_learning_rate	include/rbm.h	/^  float _learning_rate;$/;"	m	class:StackedRbm
_line_number	include/dataset.h	/^  size_t _line_number;$/;"	m	class:DataStream
_lookingForHelp	tools/utility/include/cmdparser.h	/^        bool _lookingForHelp() const {$/;"	f	class:CmdParser
_m	tools/libcumatrix/include/device_matrix.h	/^      const device_matrix<T>& _m;$/;"	m	class:device_matrix::Transposed
_m	tools/utility/tools/libcumatrix/include/device_matrix.h	/^      const device_matrix<T>& _m;$/;"	m	class:device_matrix::Transposed
_max	include/dataset.h	/^  vector<double> _max;$/;"	m	class:ZeroOne
_mean	include/dataset.h	/^  vector<double> _mean;$/;"	m	class:StandardScore
_mem_manager	tools/libcumatrix/include/device_matrix.h	/^  static CudaMemManager<T> _mem_manager;$/;"	m	class:device_matrix
_mem_manager	tools/utility/tools/libcumatrix/include/device_matrix.h	/^  static CudaMemManager<T> _mem_manager;$/;"	m	class:device_matrix
_min	include/dataset.h	/^  vector<double> _min;$/;"	m	class:ZeroOne
_nLines	include/dataset.h	/^  size_t _nLines;$/;"	m	class:DataStream
_n_input_maps	include/cnn.h	/^  size_t _n_input_maps;$/;"	m	class:MIMOFeatureTransform
_n_output_maps	include/cnn.h	/^  size_t _n_output_maps;$/;"	m	class:MIMOFeatureTransform
_name	include/batch_mod.h	/^  string   _name;$/;"	m	class:Batches_mod
_name	include/dnn-graph.h	/^  string        _name;$/;"	m	class:Node
_net	include/dnn-graph.h	/^  DNN*          _net;$/;"	m	class:Node
_node_in	include/dnn-graph.h	/^  Node              _node_in;$/;"	m	class:DNNGraph
_node_out	include/dnn-graph.h	/^  Node              _node_out;$/;"	m	class:DNNGraph
_nodes	include/dnn-graph.h	/^  map<string, Node> _nodes;$/;"	m	class:DNNGraph
_normalizer	include/dataset.h	/^  Normalization* _normalizer;$/;"	m	class:DataSet
_objectiveWeight	include/dnn-graph.h	/^  float         _objectiveWeight;$/;"	m	class:Node
_optimize_append_for_type	tools/utility/src/array.cpp	50;"	d	file:
_optimize_constructor_for_type	tools/utility/src/array.cpp	14;"	d	file:
_optimize_copy_constructor_for_type	tools/utility/src/array.cpp	20;"	d	file:
_optimize_expand_for_type	tools/utility/src/array.cpp	27;"	d	file:
_optimize_for_POD	tools/utility/src/array.cpp	64;"	d	file:
_optimize_functions_for_type	tools/utility/src/array.cpp	57;"	d	file:
_optimize_operator_equal_for_type	tools/utility/src/array.cpp	35;"	d	file:
_optionStr	tools/utility/include/cmdparser.h	/^            string _optionStr() const {$/;"	f	struct:CmdParser::Arg
_options	tools/utility/include/cmdparser.h	/^        string _options;$/;"	m	class:CmdParser
_output_dim	include/feature-transform.h	/^  size_t _output_dim;$/;"	m	class:FeatureTransform
_pool	tools/libcumatrix/include/cuda_memory_manager.h	/^  typename MemPool<T>::type _pool;$/;"	m	class:CudaMemManager
_pool	tools/utility/tools/libcumatrix/include/cuda_memory_manager.h	/^  typename MemPool<T>::type _pool;$/;"	m	class:CudaMemManager
_ptr	tools/libcumatrix/include/device_matrix.h	/^  T* _ptr;$/;"	m	class:SCALAR_MEMORY_BUFFER
_ptr	tools/utility/tools/libcumatrix/include/device_matrix.h	/^  T* _ptr;$/;"	m	class:SCALAR_MEMORY_BUFFER
_quicksort_ascend	tools/utility/include/sorting.h	/^      static void _quicksort_ascend(Array<T> &arr, int left, int right) {$/;"	f	class:util::sorting
_quicksort_descend	tools/utility/include/sorting.h	/^      static void _quicksort_descend(Array<T> &arr, int left, int right) {$/;"	f	class:util::sorting
_random_seed_	tools/libcumatrix/include/math_ext.h	/^    static time_t _random_seed_ = srander();$/;"	m	namespace:ext::randomgenerator
_random_seed_	tools/utility/tools/libcumatrix/include/math_ext.h	/^    static time_t _random_seed_ = srander();$/;"	m	namespace:ext::randomgenerator
_rows	include/host_matrix.h	/^  size_t _rows;$/;"	m	class:host_matrix
_rows	tools/libcumatrix/include/device_matrix.h	/^  size_t _rows;$/;"	m	class:device_matrix
_rows	tools/utility/include/matrix.h	/^    size_t _rows;$/;"	m	class:Matrix2D
_rows	tools/utility/tools/libcumatrix/include/device_matrix.h	/^  size_t _rows;$/;"	m	class:device_matrix
_scale	include/cnn.h	/^  size_t _scale;$/;"	m	class:SubSamplingLayer
_seen	include/dnn-graph.h	/^  bool          _seen;$/;"	m	class:Node
_size	tools/utility/include/array.h	/^    size_t       _size;       \/\/ number of valid elements$/;"	m	class:Array
_size	tools/utility/include/matrix.h	/^    size_t _size;$/;"	m	class:Matrix2D
_slopeThres	include/rbm.h	/^  float _slopeThres;$/;"	m	class:StackedRbm
_sparse	include/dataset.h	/^  bool _sparse;$/;"	m	class:DataSet
_start	include/dataset.h	/^  size_t _start, _end;$/;"	m	class:DataStream
_states	include/dnn-utility.h	/^  curandState* _states;$/;"	m	class:CURAND_STATE
_status	tools/utility/include/pbar.h	/^    std::string _status;$/;"	m	class:ProgressBar
_str	tools/utility/include/cmdparser.h	/^                string _str;$/;"	m	class:CmdParser::AutoType
_stream	include/dataset.h	/^  DataStream _stream;$/;"	m	class:DataSet
_time	tools/utility/include/profile.h	/^    time_t _time;$/;"	m	class:Profile
_totalSize	include/batch.h	/^      size_t _totalSize;$/;"	m	class:Batches::iterator
_totalSize	include/batch.h	/^  size_t _totalSize;$/;"	m	class:Batches
_total_byte_allocated	tools/libcumatrix/include/cuda_memory_manager.h	/^  size_t _total_byte_allocated;$/;"	m	class:CudaMemManager
_total_byte_allocated	tools/utility/tools/libcumatrix/include/cuda_memory_manager.h	/^  size_t _total_byte_allocated;$/;"	m	class:CudaMemManager
_transforms	include/cnn.h	/^  std::vector<MIMOFeatureTransform*> _transforms;$/;"	m	class:CNN
_transforms	include/dnn.h	/^  std::vector<FeatureTransform*> _transforms;$/;"	m	class:DNN
_type	include/dataset.h	/^  NormType _type;$/;"	m	class:DataSet
_usage	tools/utility/include/cmdparser.h	/^        string _usage;$/;"	m	class:CmdParser
_value	tools/utility/include/util.h	/^      T2 _value;$/;"	m	class:util::kvPair
_vis_type	include/rbm.h	/^  UNIT_TYPE _vis_type;$/;"	m	class:StackedRbm
_w	include/feature-transform.h	/^  mat _w;$/;"	m	class:AffineTransform
_weights	include/rbm.h	/^  vector<mat> _weights;$/;"	m	class:StackedRbm
add	tools/utility/include/cmdparser.h	/^        CmdParser& add(string option, bool mandatory = true) {$/;"	f	class:CmdParser
add	tools/utility/include/cmdparser.h	/^        CmdParser& add(string option, const char* description, bool mandatory = true) {$/;"	f	class:CmdParser
add	tools/utility/include/cmdparser.h	/^        CmdParser& add(string option, const char* description, const char* defaultArg) {$/;"	f	class:CmdParser
addGroup	tools/utility/include/cmdparser.h	/^        CmdParser& addGroup(string description) {$/;"	f	class:CmdParser
addPath	src/dnn-graph.cpp	/^void DNNGraph::addPath(vector<DNN*>& subnets, vector<string>& names, vector<bool>& layerOn, float objectiveWeight) {$/;"	f	class:DNNGraph
adjustLearningRate	src/dnn.cpp	/^void DNN::adjustLearningRate(float trainAcc) {$/;"	f	class:DNN
antiWeightExplosion	src/rbm.cpp	/^void StackedRbm::antiWeightExplosion(mat& W, const mat& v1, const mat& v2, float &learning_rate) {$/;"	f	class:StackedRbm
append	src/dnn.cpp	/^void DNN::append(DNN& subnet) { \/\/New method$/;"	f	class:DNN
append	tools/utility/include/array.h	/^  void append(const Array<T>& array) {$/;"	f	class:Array
appendSlashAtTheEnd	tools/utility/src/util.cpp	/^  void appendSlashAtTheEnd(string& str) {$/;"	f	namespace:util
ascend	tools/utility/include/sorting.h	/^	ascend,$/;"	e	enum:util::sorting::sortingOrder
b_sigmoid	tools/libcumatrix/include/math_ext.h	/^  std::vector<T> b_sigmoid(const std::vector<T>& x) {$/;"	f	namespace:ext
b_sigmoid	tools/utility/tools/libcumatrix/include/math_ext.h	/^  std::vector<T> b_sigmoid(const std::vector<T>& x) {$/;"	f	namespace:ext
back	tools/libcumatrix/include/cuda_memory_manager.h	/^  T* back() const {$/;"	f	struct:MemList
back	tools/utility/tools/libcumatrix/include/cuda_memory_manager.h	/^  T* back() const {$/;"	f	struct:MemList
backPropagate	src/cnn.cpp	/^void CNN::backPropagate(mat& error, const mat& fin, const mat& fout,$/;"	f	class:CNN
backPropagate	src/cnn.cpp	/^void ConvolutionalLayer::backPropagate(vector<mat>& errors, const vector<mat>& fins,$/;"	f	class:ConvolutionalLayer
backPropagate	src/cnn.cpp	/^void SubSamplingLayer::backPropagate(vector<mat>& errors, const vector<mat>& fins,$/;"	f	class:SubSamplingLayer
backPropagate	src/dnn-graph.cpp	/^void DNNGraph::backPropagate(vector<BatchData>& data_vec, float learning_rate, ERROR_MEASURE errorMeasure) {$/;"	f	class:DNNGraph
backPropagate	src/dnn-graph.cpp	/^void Node::backPropagate(const mat& error, float learning_rate) {$/;"	f	class:Node
backPropagate	src/dnn.cpp	/^void DNN::backPropagate(mat& error, const mat& fin, const mat& fout, float learning_rate) { \/\/ For back-compatibility with cnn-train.cpp$/;"	f	class:DNN
backPropagate	src/dnn.cpp	/^void DNN::backPropagate(mat& error, const mat& fin, const mat& fout, float learning_rate, const vector<bool>& layerOn) {$/;"	f	class:DNN
backPropagate	src/feature-transform.cpp	/^void AffineTransform::backPropagate(mat& error, const mat& fin, const mat& fout, float learning_rate) {$/;"	f	class:AffineTransform
backPropagate	src/feature-transform.cpp	/^void Sigmoid::backPropagate(mat& error, const mat& fin, const mat& fout, float learning_rate) {$/;"	f	class:Sigmoid
backPropagate	src/feature-transform.cpp	/^void Softmax::backPropagate(mat& error, const mat& fin, const mat& fout, float learning_rate) {$/;"	f	class:Softmax
backPropagate_fdlr	src/dnn.cpp	/^void DNN::backPropagate_fdlr(mat& error, const mat& fin, const mat& fout, float learning_rate) { \/\/New$/;"	f	class:DNN
backPropagate_lastLayer	src/dnn-graph.cpp	/^void Node::backPropagate_lastLayer(mat& error, float learning_rate) {$/;"	f	class:Node
backPropagate_top_bottom	src/dnn.cpp	/^void DNN::backPropagate_top_bottom(mat& error, const mat& fin, const mat& fout, float learning_rate, int num_adapt_top, int num_adapt_bottom) { \/\/New$/;"	f	class:DNN
backPropagate_wo_resize	src/dnn.cpp	/^void DNN::backPropagate_wo_resize(mat& error, const mat& fin, const mat& fout, float learning_rate) { \/\/ For back-compatibility with cnn-train.cpp$/;"	f	class:DNN
backPropagate_wo_resize	src/dnn.cpp	/^void DNN::backPropagate_wo_resize(mat& error, const mat& fin, const mat& fout, float learning_rate, const vector<bool>& layerOn) {$/;"	f	class:DNN
base	src/dnn-train-graph.cpp	/^  int base;$/;"	m	struct:TrainConfig	file:
batchSize	include/config.h	/^  size_t batchSize;$/;"	m	struct:Config
batchSize	src/dnn-train-graph.cpp	/^  size_t batchSize;$/;"	m	struct:TrainConfig	file:
begin	include/batch.h	/^  const iterator& begin() const { return _begin; }$/;"	f	class:Batches
begin	include/batch_mod.h	/^  const iterator& begin() const { return _begin; }$/;"	f	class:Batches_mod
benchmark	tools/libcumatrix/benchmark.cpp	/^void benchmark() {$/;"	f
benchmark	tools/utility/tools/libcumatrix/benchmark.cpp	/^void benchmark() {$/;"	f
benchmark_batch_convn	src/cnn-utility.cu	/^void benchmark_batch_convn() {$/;"	f
benchmark_valid_and_valid_shm	src/cnn-utility.cu	/^void benchmark_valid_and_valid_shm() {$/;"	f
cache_size	src/dnn-train-graph.cpp	/^  size_t cache_size;$/;"	m	struct:TrainConfig	file:
calcAverageStandardDeviation	src/rbm.cpp	/^float calcAverageStandardDeviation(const mat& x) {$/;"	f
capacity	tools/utility/include/array.h	/^  size_t capacity() const {$/;"	f	class:Array
clear	tools/utility/include/array.h	/^  void clear() {$/;"	f	class:Array
clone	src/dataset.cpp	/^Normalization* StandardScore::clone() const {$/;"	f	class:StandardScore
clone	src/dataset.cpp	/^Normalization* ZeroOne::clone() const {$/;"	f	class:ZeroOne
clone	src/feature-transform.cpp	/^AffineTransform* AffineTransform::clone() const {$/;"	f	class:AffineTransform
clone	src/feature-transform.cpp	/^Sigmoid* Sigmoid::clone() const {$/;"	f	class:Sigmoid
clone	src/feature-transform.cpp	/^Softmax* Softmax::clone() const {$/;"	f	class:Softmax
cnn_predict	src/cnn-train.cpp	/^size_t cnn_predict(const DNN& dnn, CNN& cnn, DataSet& data,$/;"	f
cnn_train	src/cnn-train.cpp	/^void cnn_train(DNN& dnn, CNN& cnn, DataSet& train, DataSet& valid,$/;"	f
cols	include/dnn-utility.h	/^  T cols; \/\/ number of columns$/;"	m	struct:linear_index_to_row_index
composite	src/dnn.cpp	/^void DNN::composite(DNN& full_net, DNN& input_net, DNN& hidden_net, DNN& out_net, vector<size_t> layer_spec_vec) { \/\/New method$/;"	f	class:DNN
convn	src/cnn-utility.cu	/^mat convn(const mat& data, const mat& kernel, SIZE s, string type) {$/;"	f
convn	src/cnn-utility.cu	/^mat convn(const mat& data, const mat& kernel, string type) {$/;"	f
convn_full_kernel	src/cnn-utility.cu	/^__global__ void convn_full_kernel(float *output, float *data, float *kernel, int H, int W, int kH, int kW) { $/;"	f
convn_full_kernel_with_shm	src/cnn-utility.cu	/^__global__ void convn_full_kernel_with_shm(float *output, float *data, float *kernel, int H, int W, int kH, int kW) { $/;"	f
convn_same_kernel	src/cnn-utility.cu	/^__global__ void convn_same_kernel(float *output, float *data, float *kernel, int H, int W, int kH, int kW) { $/;"	f
convn_valid_kernel	src/cnn-utility.cu	/^__global__ void convn_valid_kernel(float *output, float *data, float *kernel, int H, int W, int kH, int kW) { $/;"	f
convn_valid_kernel_with_shm	src/cnn-utility.cu	/^__global__ void convn_valid_kernel_with_shm(float *output, const float *data,$/;"	f
copyToHost	src/dnn-utility.cu	/^vector<float> copyToHost(const mat& m) {$/;"	f
countDifference	src/dnn-utility.cu	/^size_t countDifference(const mat& m1, const mat& m2) {$/;"	f
countError	src/dnn-graph.cpp	/^vector<size_t> DNNGraph::countError(vector<BatchData>& data_vec, ERROR_MEASURE errorMeasure) {$/;"	f	class:DNNGraph
countLines	src/dataset.cpp	/^size_t countLines(const string& fn) {$/;"	f
count_lines	src/dataset.cpp	/^size_t DataStream::count_lines() const {$/;"	f	class:DataStream
create	src/feature-transform.cpp	/^FeatureTransform* FeatureTransform::create(FILE* fid) {$/;"	f	class:FeatureTransform
cross_some_cols	tools/utility/src/matrix.cpp	/^void DataSheet<T>::cross_some_cols(bool* cross_matrix, int dc) {$/;"	f	class:DataSheet
cross_some_rows	tools/utility/src/matrix.cpp	/^void DataSheet<T>::cross_some_rows(bool* cross_matrix, int dr) {$/;"	f	class:DataSheet
cuda_profiling_ground	src/cnn-train.cpp	/^void cuda_profiling_ground() {$/;"	f
dCrossEntropy	src/dnn-utility.cu	/^void dCrossEntropy(mat& error, const mat &target, const mat& output) {$/;"	f
dcrossentropy_kernel	src/dnn-utility.cu	/^__global__ void dcrossentropy_kernel(float* error, float* const target, float* const output, unsigned int rows, unsigned int cols) {$/;"	f
de_concat	src/cnn-utility.cu	/^vector<mat> de_concat(const mat& big, int N) {$/;"	f
default_arg	tools/utility/include/cmdparser.h	/^            string default_arg;$/;"	m	struct:CmdParser::Arg
descend	tools/utility/include/sorting.h	/^	descend$/;"	e	enum:util::sorting::sortingOrder
description	tools/utility/include/cmdparser.h	/^            string description;$/;"	m	struct:CmdParser::Arg
det	tools/utility/src/matrix.cpp	/^T Matrix2D<T>::det(const Matrix2D<T>& mat)$/;"	f	class:Matrix2D
device_matrix	tools/libcumatrix/include/device_matrix.h	/^class device_matrix {$/;"	c
device_matrix	tools/libcumatrix/src/device_matrix.cu	/^device_matrix<T>::device_matrix(T* h_data, size_t r, size_t c):$/;"	f	class:T
device_matrix	tools/libcumatrix/src/device_matrix.cu	/^device_matrix<T>::device_matrix(const Transposed& source):$/;"	f	class:T
device_matrix	tools/libcumatrix/src/device_matrix.cu	/^device_matrix<T>::device_matrix(const string& filename):$/;"	f	class:T
device_matrix	tools/libcumatrix/src/device_matrix.cu	/^device_matrix<T>::device_matrix(size_t r, size_t c):$/;"	f	class:T
device_matrix	tools/libcumatrix/src/device_matrix.cu	/^device_matrix<T>::device_matrix(size_t r, size_t c, T value):$/;"	f	class:T
device_matrix	tools/libcumatrix/src/device_matrix.cu	/^template <typename T> device_matrix<T>::device_matrix():$/;"	f	class:T
device_matrix	tools/utility/tools/libcumatrix/include/device_matrix.h	/^class device_matrix {$/;"	c
device_matrix	tools/utility/tools/libcumatrix/src/device_matrix.cu	/^device_matrix<T>::device_matrix(T* h_data, size_t r, size_t c):$/;"	f	class:T
device_matrix	tools/utility/tools/libcumatrix/src/device_matrix.cu	/^device_matrix<T>::device_matrix(const Transposed& source):$/;"	f	class:T
device_matrix	tools/utility/tools/libcumatrix/src/device_matrix.cu	/^device_matrix<T>::device_matrix(const string& filename):$/;"	f	class:T
device_matrix	tools/utility/tools/libcumatrix/src/device_matrix.cu	/^device_matrix<T>::device_matrix(size_t r, size_t c):$/;"	f	class:T
device_matrix	tools/utility/tools/libcumatrix/src/device_matrix.cu	/^device_matrix<T>::device_matrix(size_t r, size_t c, T value):$/;"	f	class:T
device_matrix	tools/utility/tools/libcumatrix/src/device_matrix.cu	/^template <typename T> device_matrix<T>::device_matrix():$/;"	f	class:T
diagMatDet	tools/utility/src/matrix.cpp	/^double diagMatDet(const Matrix2D<double>& m) {$/;"	f
diff1st	tools/libcumatrix/include/math_ext.h	/^  std::vector<T> diff1st(const std::vector<T>& v) {$/;"	f	namespace:ext
diff1st	tools/utility/tools/libcumatrix/include/math_ext.h	/^  std::vector<T> diff1st(const std::vector<T>& v) {$/;"	f	namespace:ext
dis	tools/utility/include/vector.h	/^    static double dis(const MyVector& v1, const MyVector& v2) { return norm(v1-v2); }$/;"	f	class:MyVector
dmat	tools/libcumatrix/include/device_arithmetic.h	78;"	d
dmat	tools/libcumatrix/include/device_arithmetic.h	9;"	d
dmat	tools/libcumatrix/include/device_matrix.h	243;"	d
dmat	tools/libcumatrix/include/device_matrix.h	314;"	d
dmat	tools/utility/tools/libcumatrix/include/device_arithmetic.h	78;"	d
dmat	tools/utility/tools/libcumatrix/include/device_arithmetic.h	9;"	d
dmat	tools/utility/tools/libcumatrix/include/device_matrix.h	243;"	d
dmat	tools/utility/tools/libcumatrix/include/device_matrix.h	314;"	d
dnn_predict	src/dnn-train-graph.cpp	/^vector<size_t> dnn_predict(DNNGraph& dnnGraph, vector<DataSet*>& data_vec, ERROR_MEASURE errorMeasure) {$/;"	f
dnn_train	src/dnn-train-graph.cpp	/^void dnn_train(DNNGraph& dnnGraph, vector<DataSet*>& train_vec, vector<DataSet*>& valid_vec, ERROR_MEASURE errorMeasure) {$/;"	f
dnn_train_switch_in_minibatch_level	src/dnn-train-graph.cpp	/^void dnn_train_switch_in_minibatch_level(vector<DNNGraph>& dnnGraph_vec, vector<vector<DataSet*>>& train_vec, vector<vector<DataSet*>>& valid_vec, ERROR_MEASURE errorMeasure) {$/;"	f
double2str	tools/utility/src/util.cpp	/^  string double2str(double n) {$/;"	f	namespace:util
down_propagate	src/rbm.cpp	/^void StackedRbm::down_propagate(const mat& W, mat& visible, const mat& hidden, UNIT_TYPE type) {$/;"	f	class:StackedRbm
downsample	src/cnn-utility.cu	/^mat downsample(const mat& x, size_t scale) {$/;"	f
downsample	src/cnn-utility.cu	/^mat downsample(const mat& x, size_t scale, SIZE s) {$/;"	f
downsample_kernel	src/cnn-utility.cu	/^__global__ void downsample_kernel(float *dst, float *src, size_t scale, int H, int W) { $/;"	f
dvec	tools/libcumatrix/include/device_arithmetic.h	77;"	d
dvec	tools/libcumatrix/include/device_arithmetic.h	8;"	d
dvec	tools/utility/tools/libcumatrix/include/device_arithmetic.h	77;"	d
dvec	tools/utility/tools/libcumatrix/include/device_arithmetic.h	8;"	d
elapsed	include/perf.h	/^      void elapsed() {$/;"	f	class:perf::Timer
elapsed	tools/utility/include/perf.h	/^      void elapsed() {$/;"	f	class:perf::Timer
element_wise_curand_kernel	src/dnn-utility.cu	/^__global__ void element_wise_curand_kernel(float* const data, curandState* globalState, unsigned int rows, unsigned int cols) {$/;"	f
empty	tools/libcumatrix/include/cuda_memory_manager.h	/^  bool empty() const {$/;"	f	struct:MemList
empty	tools/utility/tools/libcumatrix/include/cuda_memory_manager.h	/^  bool empty() const {$/;"	f	struct:MemList
end	include/batch.h	/^  const iterator& end() const { return _end; }$/;"	f	class:Batches
end	include/batch_mod.h	/^  const iterator& end() const { return _end; }$/;"	f	class:Batches_mod
erase	tools/utility/include/array.h	/^  void erase(size_t idx) {$/;"	f	class:Array
expand	tools/utility/include/array.h	/^  void expand(size_t c) {$/;"	f	class:Array
ext	include/dnn-utility.h	/^namespace ext {$/;"	n
ext	tools/libcumatrix/example2.cu	/^using namespace ext;$/;"	v
ext	tools/libcumatrix/include/device_math.h	/^namespace ext {$/;"	n
ext	tools/libcumatrix/include/math_ext.h	/^namespace ext {$/;"	n
ext	tools/utility/tools/libcumatrix/example2.cu	/^using namespace ext;$/;"	v
ext	tools/utility/tools/libcumatrix/include/device_math.h	/^namespace ext {$/;"	n
ext	tools/utility/tools/libcumatrix/include/math_ext.h	/^namespace ext {$/;"	n
f_data	include/dataset.h	/^  std::future<BatchData> f_data;$/;"	m	class:DataSet
feedBackward	src/cnn.cpp	/^void CNN::feedBackward(mat& error, const mat& delta) {$/;"	f	class:CNN
feedBackward	src/cnn.cpp	/^void ConvolutionalLayer::feedBackward($/;"	f	class:ConvolutionalLayer
feedBackward	src/cnn.cpp	/^void SubSamplingLayer::feedBackward($/;"	f	class:SubSamplingLayer
feedForward	src/cnn.cpp	/^void CNN::feedForward(mat& fout, const mat& fin) {$/;"	f	class:CNN
feedForward	src/cnn.cpp	/^void ConvolutionalLayer::feedForward(vector<mat>& fouts, const vector<mat>& fins) {$/;"	f	class:ConvolutionalLayer
feedForward	src/cnn.cpp	/^void SubSamplingLayer::feedForward(vector<mat>& fouts, const vector<mat>& fins) {$/;"	f	class:SubSamplingLayer
feedForward	src/dnn-graph.cpp	/^void DNNGraph::feedForward(const mat& fin) {$/;"	f	class:DNNGraph
feedForward	src/dnn-graph.cpp	/^void Node::feedForward(const mat& fin) { \/\/traverse order: all fanin -> self -> fanouts$/;"	f	class:Node
feedForward	src/dnn.cpp	/^mat DNN::feedForward(const mat& fin) const {$/;"	f	class:DNN
feedForward	src/dnn.cpp	/^void DNN::feedForward(mat& output, const mat& fin) {$/;"	f	class:DNN
feedForward	src/feature-transform.cpp	/^void AffineTransform::feedForward(mat& fout, const mat& fin) {$/;"	f	class:AffineTransform
feedForward	src/feature-transform.cpp	/^void Sigmoid::feedForward(mat& fout, const mat& fin) {$/;"	f	class:Sigmoid
feedForward	src/feature-transform.cpp	/^void Softmax::feedForward(mat& fout, const mat& fin) {$/;"	f	class:Softmax
feedForward_wo_resize	src/dnn.cpp	/^mat DNN::feedForward_wo_resize(const mat& fin) const {$/;"	f	class:DNN
feedForward_wo_resize	src/dnn.cpp	/^void DNN::feedForward_wo_resize(mat& output, const mat& fin) {$/;"	f	class:DNN
fill_bias	include/dnn-utility.h	32;"	d
fillwith	include/host_matrix.h	/^  void fillwith(T value) {$/;"	f	class:host_matrix
final_momentum	include/rbm.h	/^  static const float initial_momentum, final_momentum, L2_penalty;$/;"	m	class:StackedRbm
final_momentum	src/rbm.cpp	/^const float StackedRbm::final_momentum = 0.9;$/;"	m	class:StackedRbm	file:
find	tools/utility/include/array.h	/^  int find(const T x) const{$/;"	f	class:Array
find	tools/utility/include/cmdparser.h	/^        AutoType find(string option) const {$/;"	f	class:CmdParser
findDimension	src/dataset.cpp	/^size_t findDimension(ifstream& fin) {$/;"	f
findMaxDimension	src/dataset.cpp	/^size_t findMaxDimension(ifstream& fin) {$/;"	f
float_max	include/utility.h	17;"	d
float_min	include/utility.h	16;"	d
free	tools/libcumatrix/src/cuda_memory_manager.cpp	/^void CudaMemManager<T>::free(T* ptr) {$/;"	f	class:CudaMemManager
free	tools/utility/tools/libcumatrix/src/cuda_memory_manager.cpp	/^void CudaMemManager<T>::free(T* ptr) {$/;"	f	class:CudaMemManager
garbage_collection	tools/libcumatrix/src/cuda_memory_manager.cpp	/^void CudaMemManager<T>::garbage_collection() {$/;"	f	class:CudaMemManager
garbage_collection	tools/utility/tools/libcumatrix/src/cuda_memory_manager.cpp	/^void CudaMemManager<T>::garbage_collection() {$/;"	f	class:CudaMemManager
gaussian_kernel	src/cnn-utility.cu	/^mat gaussian_kernel(int h, int w) {$/;"	f
gc	tools/libcumatrix/src/cuda_memory_manager.cpp	/^void CudaMemManager<T>::gc() {$/;"	f	class:CudaMemManager
gc	tools/utility/tools/libcumatrix/src/cuda_memory_manager.cpp	/^void CudaMemManager<T>::gc() {$/;"	f	class:CudaMemManager
geam	tools/libcumatrix/include/device_matrix.h	/^void geam(const dmat& A, const dmat& B, dmat& C, T alpha = 1.0, T beta = 1.0, bool transA = false, bool transB = false) {$/;"	f
geam	tools/utility/tools/libcumatrix/include/device_matrix.h	/^void geam(const dmat& A, const dmat& B, dmat& C, T alpha = 1.0, T beta = 1.0, bool transA = false, bool transB = false) {$/;"	f
gemm	tools/libcumatrix/include/device_matrix.h	/^void gemm(const dmat& A, const dmat& B, dmat& C, T alpha = 1.0, T beta = 0.0, bool transA = false, bool transB = false) {$/;"	f
gemm	tools/utility/tools/libcumatrix/include/device_matrix.h	/^void gemm(const dmat& A, const dmat& B, dmat& C, T alpha = 1.0, T beta = 0.0, bool transA = false, bool transB = false) {$/;"	f
get	src/dnn-utility.cu	/^curandState* CURAND_STATE::get() const {$/;"	f	class:CURAND_STATE
get	tools/libcumatrix/src/cuda_memory_manager.cpp	/^T* CudaMemManager<T>::get(size_t size) {$/;"	f	class:CudaMemManager
get	tools/utility/src/matrix.cpp	/^T& Matrix2D<T>::get(size_t x, size_t y) const {$/;"	f	class:Matrix2D
get	tools/utility/tools/libcumatrix/src/cuda_memory_manager.cpp	/^T* CudaMemManager<T>::get(size_t size) {$/;"	f	class:CudaMemManager
getAsymptoticBound	src/rbm.cpp	/^float getAsymptoticBound(const vector<float> &error, size_t epoch, size_t maxEpoch, size_t N) {$/;"	f
getBatchData	src/rbm.cpp	/^mat StackedRbm::getBatchData(DataSet& data, const Batches::iterator& itr, int layer) {$/;"	f	class:StackedRbm
getBuffer	tools/libcumatrix/include/device_matrix.h	/^  static T* getBuffer() {$/;"	f	class:SCALAR_MEMORY_BUFFER
getBuffer	tools/utility/tools/libcumatrix/include/device_matrix.h	/^  static T* getBuffer() {$/;"	f	class:SCALAR_MEMORY_BUFFER
getColorCode	src/cnn-utility.cu	/^string getColorCode(float n) {$/;"	f
getCols	include/host_matrix.h	/^  size_t getCols() const { return _cols; }$/;"	f	class:host_matrix
getCols	tools/libcumatrix/include/device_matrix.h	/^  size_t getCols() const { return _cols; }$/;"	f	class:device_matrix
getCols	tools/utility/include/matrix.h	/^    size_t getCols() const { return _cols; }$/;"	f	class:Matrix2D
getCols	tools/utility/tools/libcumatrix/include/device_matrix.h	/^  size_t getCols() const { return _cols; }$/;"	f	class:device_matrix
getConfig	include/dnn-graph.h	/^  Config getConfig() const { return _config; }$/;"	f	class:DNNGraph
getConfig	include/dnn-graph.h	/^  Config& getConfig() { return _config; }$/;"	f	class:DNNGraph
getConfig	src/dnn.cpp	/^Config& DNN::getConfig() {$/;"	f	class:DNN
getConfig	src/dnn.cpp	/^const Config DNN::getConfig() const {$/;"	f	class:DNN
getData	include/host_matrix.h	/^  T* getData() const { return _data; }$/;"	f	class:host_matrix
getData	tools/libcumatrix/include/device_matrix.h	/^  T* getData() const { return _data; }$/;"	f	class:device_matrix
getData	tools/utility/tools/libcumatrix/include/device_matrix.h	/^  T* getData() const { return _data; }$/;"	f	class:device_matrix
getDefaultArg	tools/utility/include/cmdparser.h	/^            string getDefaultArg() const {$/;"	f	struct:CmdParser::Arg
getDescription	tools/utility/include/cmdparser.h	/^            string getDescription() const {$/;"	f	struct:CmdParser::Arg
getDim	tools/utility/include/vector.h	/^    int getDim() const { return Array<T>::_size; }$/;"	f	class:MyVector
getError	src/dnn-utility.cu	/^mat getError(const mat& target, const mat& output, ERROR_MEASURE errorMeasure) {$/;"	f
getError	tools/utility/include/util.h	/^      string getError() { return m_strError; }$/;"	f	class:util::MyException
getFileColumnNumber	tools/utility/src/matrix.cpp	/^int getFileColumnNumber(string filename) {$/;"	f
getFileLineNumber	tools/utility/src/matrix.cpp	/^int getFileLineNumber(string filename) {$/;"	f
getFreeEnergy	src/rbm.cpp	/^float StackedRbm::getFreeEnergy(const mat& visible, const mat& W) {$/;"	f	class:StackedRbm
getFreeEnergyGap	src/rbm.cpp	/^float StackedRbm::getFreeEnergyGap(DataSet& data, size_t batch_size, const mat& W, int layer) {$/;"	f	class:StackedRbm
getInputDimension	include/dnn-graph.h	/^  size_t getInputDimension() const { return _net->getTransforms().front()->getInputDimension(); }$/;"	f	class:Node
getInputDimension	include/feature-transform.h	/^  virtual size_t getInputDimension() const { return _input_dim; }$/;"	f	class:FeatureTransform
getInputDimension	src/cnn.cpp	/^size_t CNN::getInputDimension() const { $/;"	f	class:CNN
getInstance	tools/libcumatrix/include/cuda_memory_manager.h	/^  static CudaMemManager& getInstance() {$/;"	f	class:CudaMemManager
getInstance	tools/libcumatrix/include/device_matrix.h	/^  static cublasHandle_t& getInstance() {$/;"	f	class:CUBLAS_HANDLE
getInstance	tools/utility/tools/libcumatrix/include/cuda_memory_manager.h	/^  static CudaMemManager& getInstance() {$/;"	f	class:CudaMemManager
getInstance	tools/utility/tools/libcumatrix/include/device_matrix.h	/^  static cublasHandle_t& getInstance() {$/;"	f	class:CUBLAS_HANDLE
getKernelHeight	src/cnn.cpp	/^size_t ConvolutionalLayer::getKernelHeight() const {$/;"	f	class:ConvolutionalLayer
getKernelWidth	src/cnn.cpp	/^size_t ConvolutionalLayer::getKernelWidth() const {$/;"	f	class:ConvolutionalLayer
getKeys	tools/libcumatrix/src/cuda_memory_manager.cpp	/^std::vector<size_t> CudaMemManager<T>::getKeys(const typename MemPool<T>::type &pool) {$/;"	f	class:CudaMemManager
getKeys	tools/utility/tools/libcumatrix/src/cuda_memory_manager.cpp	/^std::vector<size_t> CudaMemManager<T>::getKeys(const typename MemPool<T>::type &pool) {$/;"	f	class:CudaMemManager
getLabelMapping	src/dnn-utility.cu	/^map<int, int> getLabelMapping(const hmat& labels) {$/;"	f
getNLayer	src/dnn.cpp	/^size_t DNN::getNLayer() const {$/;"	f	class:DNN
getNOutput	include/dnn-graph.h	/^  size_t getNOutput() { return _node_out._fanin.size(); }$/;"	f	class:DNNGraph
getNTransform	src/dnn.cpp	/^size_t DNN::getNTransform() const {$/;"	f	class:DNN
getNormalizer	src/dataset.cpp	/^Normalization* DataSet::getNormalizer() const {$/;"	f	class:DataSet
getNumInputMaps	include/cnn.h	/^  size_t getNumInputMaps() const { return _n_input_maps; }$/;"	f	class:MIMOFeatureTransform
getNumOutputMaps	include/cnn.h	/^  size_t getNumOutputMaps() const { return _n_output_maps; }$/;"	f	class:MIMOFeatureTransform
getOutputDimension	include/dnn-graph.h	/^  size_t getOutputDimension() const { return _net->getTransforms().back()->getOutputDimension(); }$/;"	f	class:Node
getOutputDimension	include/feature-transform.h	/^  virtual size_t getOutputDimension() const { return _output_dim; }$/;"	f	class:FeatureTransform
getOutputDimension	src/cnn.cpp	/^size_t CNN::getOutputDimension() const { $/;"	f	class:CNN
getPadding	tools/utility/include/cmdparser.h	/^            string getPadding() const {$/;"	f	struct:CmdParser::Arg
getRandWeights	src/cnn-train.cpp	/^vector<mat> getRandWeights(size_t input_dim, string structure, size_t output_dim) {$/;"	f
getReconstructionError	src/rbm.cpp	/^float StackedRbm::getReconstructionError(DataSet& data, const mat& W,$/;"	f	class:StackedRbm
getRows	include/host_matrix.h	/^  size_t getRows() const { return _rows; }$/;"	f	class:host_matrix
getRows	tools/libcumatrix/include/device_matrix.h	/^  size_t getRows() const { return _rows; }$/;"	f	class:device_matrix
getRows	tools/utility/include/matrix.h	/^    size_t getRows() const { return _rows; }$/;"	f	class:Matrix2D
getRows	tools/utility/src/matrix.cpp	/^T* Matrix2D<T>::getRows(size_t r) const {$/;"	f	class:Matrix2D
getRows	tools/utility/tools/libcumatrix/include/device_matrix.h	/^  size_t getRows() const { return _rows; }$/;"	f	class:device_matrix
getScale	src/cnn.cpp	/^size_t SubSamplingLayer::getScale() const {$/;"	f	class:SubSamplingLayer
getSlope	src/rbm.cpp	/^float getSlope(const vector<float> &seq, size_t N) {$/;"	f
getSuitableShmConfig	src/cnn-utility.cu	/^size_t getSuitableShmConfig(dim3 &grids, dim3 &threads, int kH, int kW) {$/;"	f
getTime	include/perf.h	/^      float getTime() { return timer->getTime(); }$/;"	f	class:perf::Timer
getTime	tools/utility/include/perf.h	/^      float getTime() { return timer->getTime(); }$/;"	f	class:perf::Timer
getTransforms	src/dnn.cpp	/^const std::vector<FeatureTransform*>& DNN::getTransforms() const {$/;"	f	class:DNN
getTransforms	src/dnn.cpp	/^std::vector<FeatureTransform*>& DNN::getTransforms() {$/;"	f	class:DNN
get_convn_size	src/cnn-utility.cu	/^SIZE get_convn_size(SIZE data, SIZE kernel, string type) {$/;"	f
get_convn_size	src/cnn-utility.cu	/^SIZE get_convn_size(const mat& data, const mat& kernel, string type) {$/;"	f
get_curand_normal	src/dnn-utility.cu	/^inline __device__ void get_curand_normal(float& x, curandState* state) {$/;"	f
get_curand_uniform	src/dnn-utility.cu	/^inline __device__ void get_curand_uniform(float& x, curandState* state) {$/;"	f
get_input_img_size	include/cnn.h	/^  SIZE get_input_img_size() const { return _input_img_size; }$/;"	f	class:MIMOFeatureTransform
get_output_img_size	include/cnn.h	/^  SIZE get_output_img_size() const {$/;"	f	class:ConvolutionalLayer
get_output_img_size	include/cnn.h	/^  SIZE get_output_img_size() const {$/;"	f	class:SubSamplingLayer
get_w	src/feature-transform.cpp	/^mat const& AffineTransform::get_w() const {$/;"	f	class:AffineTransform
get_w	src/feature-transform.cpp	/^mat& AffineTransform::get_w() {$/;"	f	class:AffineTransform
getline	src/dataset.cpp	/^string DataStream::getline() {$/;"	f	class:DataStream
goToLine	src/dataset.cpp	/^std::ifstream& goToLine(std::ifstream& file, unsigned long num){$/;"	f
gogo	src/cnn-utility.cu	/^void gogo() {$/;"	f
graph_id	src/dnn-train-graph.cpp	/^  size_t graph_id;  \/\/test$/;"	m	struct:TrainConfig	file:
has	tools/utility/include/cmdparser.h	/^        bool has(int n) {$/;"	f	class:CmdParser
has	tools/utility/include/cmdparser.h	/^        bool has(string arg) {$/;"	f	class:CmdParser
hasMore	tools/libcumatrix/src/cuda_memory_manager.cpp	/^bool CudaMemManager<T>::hasMore(size_t size) {$/;"	f	class:CudaMemManager
hasMore	tools/utility/tools/libcumatrix/src/cuda_memory_manager.cpp	/^bool CudaMemManager<T>::hasMore(size_t size) {$/;"	f	class:CudaMemManager
hasNAN	include/dnn-utility.h	/^bool hasNAN(const host_matrix<T>& x) {$/;"	f
hidden_net_in	src/dnn-train-graph.cpp	/^  string hidden_net_in; \/\/test$/;"	m	struct:TrainConfig	file:
hist	tools/libcumatrix/include/math_ext.h	/^  std::vector<size_t> hist(const std::vector<T>& v) {$/;"	f	namespace:ext
hist	tools/utility/tools/libcumatrix/include/math_ext.h	/^  std::vector<size_t> hist(const std::vector<T>& v) {$/;"	f	namespace:ext
hit	tools/libcumatrix/include/cuda_memory_manager.h	/^  void hit() {$/;"	f	struct:MemList
hit	tools/utility/tools/libcumatrix/include/cuda_memory_manager.h	/^  void hit() {$/;"	f	struct:MemList
hit_rate	tools/libcumatrix/include/cuda_memory_manager.h	/^  size_t hit_rate;$/;"	m	struct:MemList
hit_rate	tools/utility/tools/libcumatrix/include/cuda_memory_manager.h	/^  size_t hit_rate;$/;"	m	struct:MemList
hits	tools/libcumatrix/include/cuda_memory_manager.h	/^  size_t hits;$/;"	m	struct:MemList
hits	tools/utility/tools/libcumatrix/include/cuda_memory_manager.h	/^  size_t hits;$/;"	m	struct:MemList
hmat	include/dataset.h	/^typedef host_matrix<float> hmat;$/;"	t
hmat	include/dnn-utility.h	/^typedef host_matrix<float> hmat;$/;"	t
host_matrix	include/host_matrix.h	/^  host_matrix():_rows(0), _cols(0), _capacity(0), _data(NULL) {}$/;"	f	class:host_matrix
host_matrix	include/host_matrix.h	/^  host_matrix(const device_matrix<T>& source): _rows(source.getRows()), _cols(source.getCols()), _capacity(_rows * _cols), _data(NULL) {$/;"	f	class:host_matrix
host_matrix	include/host_matrix.h	/^  host_matrix(const host_matrix<T>& source): _rows(source._rows), _cols(source._cols), _capacity(_rows * _cols), _data(NULL) {$/;"	f	class:host_matrix
host_matrix	include/host_matrix.h	/^  host_matrix(size_t r, size_t c): _rows(r), _cols(c), _capacity(r*c), _data(NULL) {$/;"	f	class:host_matrix
host_matrix	include/host_matrix.h	/^class host_matrix {$/;"	c
info	include/host_matrix.h	/^  void info(FILE* fid = stdout) const {$/;"	f	class:host_matrix
init	src/cnn.cpp	/^void CNN::init(const string &structure, SIZE img_size) {$/;"	f	class:CNN
init	src/dataset.cpp	/^void DataStream::init(const string& filename, size_t start, size_t end) {$/;"	f	class:DataStream
init	src/dnn.cpp	/^void DNN::init(const std::vector<mat>& weights) {$/;"	f	class:DNN
initial_momentum	include/rbm.h	/^  static const float initial_momentum, final_momentum, L2_penalty;$/;"	m	class:StackedRbm
initial_momentum	src/rbm.cpp	/^const float StackedRbm::initial_momentum = 0.5;$/;"	m	class:StackedRbm	file:
input_dim	src/dnn-train-graph.cpp	/^  size_t input_dim;$/;"	m	struct:TrainConfig	file:
input_net_in	src/dnn-train-graph.cpp	/^  string input_net_in; \/\/test$/;"	m	struct:TrainConfig	file:
int2str	tools/utility/include/cmdparser.h	/^        static string int2str(int n) {$/;"	f	class:CmdParser
int2str	tools/utility/src/util.cpp	/^  string int2str(int n) {$/;"	f	namespace:util
inv	tools/utility/src/matrix.cpp	/^Matrix2D<T> Matrix2D<T>::inv(const Matrix2D<T>& A)$/;"	f	class:Matrix2D
isEmpty	tools/utility/include/array.h	/^  bool isEmpty() const {$/;"	f	class:Array
isEnd	include/batch.h	/^      bool isEnd () const {$/;"	f	class:Batches::iterator
isEoutStopDecrease	src/dnn-train-graph.cpp	/^bool isEoutStopDecrease(const std::vector<size_t> Eout, size_t epoch, size_t nNonIncEpoch) {$/;"	f
isFileSparse	src/dataset.cpp	/^bool isFileSparse(string fn) {$/;"	f
isFloat	tools/utility/include/cmdparser.h	/^        static bool isFloat( string myString ) {$/;"	f	class:CmdParser
isMatched	tools/utility/src/matrix.cpp	/^bool Matrix2D<T>::isMatched(const Matrix2D<T>& lhs, const Matrix2D<T>& rhs) {$/;"	f	class:Matrix2D
isMatched	tools/utility/src/matrix.cpp	/^bool Matrix2D<T>::isMatched(const Matrix2D<T>& rhs) const {$/;"	f	class:Matrix2D
isNumber	tools/utility/include/cmdparser.h	/^        static bool isNumber(const std::string& s) {$/;"	f	class:CmdParser
isOptionLegal	tools/utility/include/cmdparser.h	/^        bool isOptionLegal() {$/;"	f	class:CmdParser
isScalar	tools/utility/include/matrix.h	/^    bool isScalar() const { return (_rows == 1) && (_cols == 1);}$/;"	f	class:Matrix2D
isSymmetric	tools/utility/src/matrix.cpp	/^bool Matrix2D<T>::isSymmetric() const {$/;"	f	class:Matrix2D
is_inf	tools/libcumatrix/include/math_ext.h	/^  inline bool is_inf(T x) {$/;"	f	namespace:ext
is_inf	tools/utility/tools/libcumatrix/include/math_ext.h	/^  inline bool is_inf(T x) {$/;"	f	namespace:ext
is_number	src/utility.cpp	/^bool is_number(const std::string& s) {$/;"	f
iterator	include/batch.h	/^      iterator(const iterator& source):$/;"	f	class:Batches::iterator
iterator	include/batch.h	/^      iterator(int index, size_t batchSize, size_t totalSize):$/;"	f	class:Batches::iterator
iterator	include/batch.h	/^  class iterator {$/;"	c	class:Batches
iterator	include/batch_mod.h	/^    iterator(DataSet* dataSetPtr, const Batches::iterator& source) : Batches::iterator(source), _dataSetPtr(dataSetPtr) {}$/;"	f	class:Batches_mod::iterator
iterator	include/batch_mod.h	/^    iterator(const iterator& source): Batches::iterator(source), _dataSetPtr(source._dataSetPtr) {}$/;"	f	class:Batches_mod::iterator
iterator	include/batch_mod.h	/^  class iterator : public Batches::iterator {$/;"	c	class:Batches_mod
kvPair	tools/utility/include/util.h	/^	kvPair(const kvPair<U,V> &source): _key(source._key), _value(source.value) {}$/;"	f	class:util::kvPair
kvPair	tools/utility/include/util.h	/^      kvPair(): _key(T1()), _value(T2()) {}$/;"	f	class:util::kvPair
kvPair	tools/utility/include/util.h	/^      kvPair(const T1& k, const T2& v): _key(k), _value(v) {}$/;"	f	class:util::kvPair
kvPair	tools/utility/include/util.h	/^  class kvPair {$/;"	c	namespace:util
layer	src/dnn-train-graph.cpp	/^  string layer;$/;"	m	struct:TrainConfig	file:
layerOn	include/config.h	/^  vector<bool> layerOn;$/;"	m	struct:Config
learningRate	include/config.h	/^  float learningRate;$/;"	m	struct:Config
learningRate	src/dnn-train-graph.cpp	/^  float learningRate;$/;"	m	struct:TrainConfig	file:
libarray_is_present	tools/utility/src/array.cpp	/^extern "C" void libarray_is_present(void) {}$/;"	f
libmatrix_is_present	tools/utility/src/matrix.cpp	/^extern "C" void libmatrix_is_present(void) {}$/;"	f
libpbar_is_present	tools/utility/src/pbar.cpp	/^extern "C" void libpbar_is_present(void) {}$/;"	f
libprofile_is_present	tools/utility/src/profile.cpp	/^extern "C" void libprofile_is_present(void) {}$/;"	f
libutil_is_present	tools/utility/src/util.cpp	/^extern "C" void libutil_is_present(void) {}$/;"	f
linearRegression	src/utility.cpp	/^void linearRegression(const std::vector<float> &x, const std::vector<float>& y, float* const &m, float* const &c) {$/;"	f
linear_index_to_row_index	include/dnn-utility.h	/^  __host__ __device__ linear_index_to_row_index(T cols) : cols(cols) {}$/;"	f	struct:linear_index_to_row_index
linear_index_to_row_index	include/dnn-utility.h	/^struct linear_index_to_row_index : public thrust::unary_function<T,T> {$/;"	s
load	src/dataset.cpp	/^void StandardScore::load(const string& fn) {$/;"	f	class:StandardScore
load	src/dataset.cpp	/^void ZeroOne::load(const string& fn) {$/;"	f	class:ZeroOne
load	tools/libcumatrix/include/device_math.h	/^  thrust::device_vector<T> load(string filename) {$/;"	f	namespace:ext
load	tools/libcumatrix/include/math_ext.h	/^  void load(std::vector<T>& v, std::string filename) {$/;"	f	namespace:ext
load	tools/utility/tools/libcumatrix/include/device_math.h	/^  thrust::device_vector<T> load(string filename) {$/;"	f	namespace:ext
load	tools/utility/tools/libcumatrix/include/math_ext.h	/^  void load(std::vector<T>& v, std::string filename) {$/;"	f	namespace:ext
loadPrecomputedStatistics	src/dataset.cpp	/^void DataSet::loadPrecomputedStatistics(string fn) {$/;"	f	class:DataSet
load_kernel_into_shm	src/cnn-utility.cu	/^__device__ void load_kernel_into_shm(float* const K, const float* const kernel, int kH, int kW, int tid, int nThreads) {$/;"	f
m	include/cnn-utility.h	/^  size_t m, n;$/;"	m	struct:SIZE
m_strError	tools/utility/include/util.h	/^      string m_strError;$/;"	m	class:util::MyException
main	src/cnn-train.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	src/data-statistics.cpp	/^int main (int argc, char* argv[]) {$/;"	f
main	src/dnn-info.cpp	/^int main (int argc, char* argv[]) {$/;"	f
main	src/dnn-init.cpp	/^int main (int argc, char* argv[]) {$/;"	f
main	src/dnn-predict.cpp	/^int main (int argc, char* argv[]) {$/;"	f
main	src/dnn-print.cpp	/^int main (int argc, char* argv[]) {$/;"	f
main	src/dnn-train-graph.cpp	/^int main (int argc, char* argv[]) {$/;"	f
main	src/dnn-transpose.cpp	/^int main (int argc, char* argv[]) {$/;"	f
main	tools/libcumatrix/benchmark.cpp	/^int main (int argc, char* argv[]) {$/;"	f
main	tools/libcumatrix/example1.cpp	/^int main (int argc, char* argv[]) {$/;"	f
main	tools/libcumatrix/example2.cu	/^int main (int argc, char* argv[]) {$/;"	f
main	tools/utility/example.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	tools/utility/tools/libcumatrix/benchmark.cpp	/^int main (int argc, char* argv[]) {$/;"	f
main	tools/utility/tools/libcumatrix/example1.cpp	/^int main (int argc, char* argv[]) {$/;"	f
main	tools/utility/tools/libcumatrix/example2.cu	/^int main (int argc, char* argv[]) {$/;"	f
malloc	tools/libcumatrix/src/cuda_memory_manager.cpp	/^T* CudaMemManager<T>::malloc(size_t N) {$/;"	f	class:CudaMemManager
malloc	tools/utility/tools/libcumatrix/src/cuda_memory_manager.cpp	/^T* CudaMemManager<T>::malloc(size_t N) {$/;"	f	class:CudaMemManager
mat	include/dataset.h	/^typedef device_matrix<float> mat;$/;"	t
mat	include/utility.h	/^typedef device_matrix<float> mat;$/;"	t
mat	tools/libcumatrix/benchmark.cpp	/^typedef device_matrix<float> mat;$/;"	t	file:
mat	tools/libcumatrix/example1.cpp	/^typedef device_matrix<float> mat;$/;"	t	file:
mat	tools/libcumatrix/example2.cu	/^typedef device_matrix<float> mat;$/;"	t	file:
mat	tools/utility/tools/libcumatrix/benchmark.cpp	/^typedef device_matrix<float> mat;$/;"	t	file:
mat	tools/utility/tools/libcumatrix/example1.cpp	/^typedef device_matrix<float> mat;$/;"	t	file:
mat	tools/utility/tools/libcumatrix/example2.cu	/^typedef device_matrix<float> mat;$/;"	t	file:
matlog	include/utility.h	29;"	d
matlog	include/utility.h	34;"	d
matrixMul	tools/libcumatrix/benchmark.cpp	/^void matrixMul(int m, int n, int l) {$/;"	f
matrixMul	tools/utility/tools/libcumatrix/benchmark.cpp	/^void matrixMul(int m, int n, int l) {$/;"	f
matslog	src/cnn.cpp	16;"	d	file:
max	include/cnn-utility.h	/^  friend SIZE max(const SIZE& s1, const SIZE& s2) {$/;"	f	struct:SIZE
max	tools/libcumatrix/include/math_ext.h	/^  T max(const std::vector<T>& v) {$/;"	f	namespace:ext
max	tools/utility/tools/libcumatrix/include/math_ext.h	/^  T max(const std::vector<T>& v) {$/;"	f	namespace:ext
maxEpoch	include/config.h	/^  size_t maxEpoch;$/;"	m	struct:Config
maxEpoch	src/dnn-train-graph.cpp	/^  size_t maxEpoch;$/;"	m	struct:TrainConfig	file:
memcpy2D	include/dnn-utility.h	/^void memcpy2D(device_matrix<T>& dest, const device_matrix<T>& src,$/;"	f
minValidAcc	src/dnn-train-graph.cpp	/^  float minValidAcc;$/;"	m	struct:TrainConfig	file:
minValidAccuracy	include/config.h	/^  float minValidAccuracy;$/;"	m	struct:Config
miss	tools/utility/include/cmdparser.h	/^        bool miss(const Arg& arg) const {$/;"	f	class:CmdParser
model_out	src/dnn-train-graph.cpp	/^  string model_out;$/;"	m	struct:TrainConfig	file:
mylog	include/utility.h	31;"	d
mylog	include/utility.h	35;"	d
mylog	tools/libcumatrix/src/device_matrix.cu	8;"	d	file:
mylog	tools/utility/tools/libcumatrix/src/device_matrix.cu	8;"	d	file:
n	include/cnn-utility.h	/^  size_t m, n;$/;"	m	struct:SIZE
nData	include/batch.h	/^      size_t nData;$/;"	m	class:Batches::Batch
nNonIncEpoch	include/config.h	/^  size_t nNonIncEpoch;$/;"	m	struct:Config
n_filename	src/dnn-train-graph.cpp	/^  string n_filename;$/;"	m	struct:TrainConfig	file:
n_type	src/dnn-train-graph.cpp	/^  NormType n_type;$/;"	m	struct:TrainConfig	file:
naiveMatrixTranspose	tools/libcumatrix/src/device_matrix.cu	/^__global__ void naiveMatrixTranspose(T *odata, const T *idata, const int rows, const int cols) {$/;"	f
naiveMatrixTranspose	tools/utility/tools/libcumatrix/src/device_matrix.cu	/^__global__ void naiveMatrixTranspose(T *odata, const T *idata, const int rows, const int cols) {$/;"	f
norm	tools/libcumatrix/include/device_math.h	/^  T norm(const thrust::device_vector<T>& v) {$/;"	f	namespace:ext
norm	tools/libcumatrix/include/device_math.h	/^  T norm(const thrust::host_vector<T>& v) {$/;"	f	namespace:ext
norm	tools/utility/include/vector.h	/^    static double norm(const MyVector& v) {$/;"	f	class:MyVector
norm	tools/utility/tools/libcumatrix/include/device_math.h	/^  T norm(const thrust::device_vector<T>& v) {$/;"	f	namespace:ext
norm	tools/utility/tools/libcumatrix/include/device_math.h	/^  T norm(const thrust::host_vector<T>& v) {$/;"	f	namespace:ext
normalize	src/dataset.cpp	/^void StandardScore::normalize(BatchData& data) const {$/;"	f	class:StandardScore
normalize	src/dataset.cpp	/^void ZeroOne::normalize(BatchData& data) const {$/;"	f	class:ZeroOne
normalize	tools/libcumatrix/include/math_ext.h	/^  void normalize(std::vector<T>& v) {$/;"	f	namespace:ext
normalize	tools/utility/tools/libcumatrix/include/math_ext.h	/^  void normalize(std::vector<T>& v) {$/;"	f	namespace:ext
normsinv	tools/utility/src/util.cpp	/^  long double normsinv(long double p) {$/;"	f	namespace:util
nrm2	tools/libcumatrix/include/device_matrix.h	/^T nrm2(const dmat& A) {$/;"	f
nrm2	tools/utility/tools/libcumatrix/include/device_matrix.h	/^T nrm2(const dmat& A) {$/;"	f
objectiveWeight	src/dnn-train-graph.cpp	/^  float objectiveWeight;$/;"	m	struct:TrainConfig	file:
offset	include/batch.h	/^      size_t offset;$/;"	m	class:Batches::Batch
ones	include/dnn-utility.h	/^inline mat ones(int m, int n) { return mat(m, n, 1); }$/;"	f
openFileOrStdout	src/dnn-predict.cpp	/^FILE* openFileOrStdout(const string& filename) {$/;"	f
operator	tools/libcumatrix/example2.cu	/^  __host__ __device__ T operator()(const T& x) const { return x * x; }$/;"	f	struct:square
operator	tools/libcumatrix/src/device_matrix.cu	/^device_matrix<T>& device_matrix<T>::operator += (T val) {$/;"	m	class:T	file:
operator	tools/utility/tools/libcumatrix/example2.cu	/^  __host__ __device__ T operator()(const T& x) const { return x * x; }$/;"	f	struct:square
operator	tools/utility/tools/libcumatrix/src/device_matrix.cu	/^device_matrix<T>& device_matrix<T>::operator += (T val) {$/;"	m	class:T	file:
operator !=	include/batch.h	/^      bool operator != (const iterator& rhs) { return _batch->offset != rhs._batch->offset; }$/;"	f	class:Batches::iterator
operator !=	tools/utility/include/array.h	/^  bool operator != (const Array<T>& rhs) {$/;"	f	class:Array
operator &	tools/libcumatrix/include/device_arithmetic.h	/^dvec<T> operator & (const dvec<T>& x, const dvec<T>& y) {$/;"	f
operator &	tools/utility/tools/libcumatrix/include/device_arithmetic.h	/^dvec<T> operator & (const dvec<T>& x, const dvec<T>& y) {$/;"	f
operator ()	include/dnn-utility.h	/^  __host__ __device__ T operator()(T i) { return i \/ cols; }$/;"	f	struct:linear_index_to_row_index
operator ()	include/host_matrix.h	/^  T& operator() (size_t i, size_t j) {$/;"	f	class:host_matrix
operator ()	include/host_matrix.h	/^  const T& operator() (size_t i, size_t j) const {$/;"	f	class:host_matrix
operator *	include/batch.h	/^      const Batch& operator * () const {$/;"	f	class:Batches::iterator
operator *	include/batch_mod.h	/^    BatchData operator * () { \/\/TODO$/;"	f	class:Batches_mod::iterator
operator *	include/cnn-utility.h	/^  SIZE operator * (size_t x) const { return SIZE(m * x, n * x); }$/;"	f	struct:SIZE
operator *	tools/libcumatrix/include/device_arithmetic.h	/^dmat<T> operator * (const dmat<T>& A, const dvec<T>& v) {$/;"	f
operator *	tools/libcumatrix/include/device_arithmetic.h	/^dmat<T> operator * (const dvec<T>& col_vector, const dvec<T>& row_vector) {$/;"	f
operator *	tools/libcumatrix/include/device_arithmetic.h	/^dmat<T> operator * (const dvec<T>& v, const dmat<T>& A) {$/;"	f
operator *	tools/libcumatrix/include/device_matrix.h	/^      device_matrix<T> operator * (const Transposed& rhs) {$/;"	f	class:device_matrix::Transposed
operator *	tools/libcumatrix/include/device_matrix.h	/^      device_matrix<T> operator * (const device_matrix<T>& rhs) {$/;"	f	class:device_matrix::Transposed
operator *	tools/libcumatrix/include/device_matrix.h	/^device_matrix<T> operator * (T alpha, const device_matrix<T>& m) {$/;"	f
operator *	tools/utility/include/matrix.h	/^Matrix2D<T> operator*(T c, const Matrix2D<T>& rhs) {$/;"	f
operator *	tools/utility/include/vector.h	/^    MyVector<T> operator * (const T coeff) const {$/;"	f	class:MyVector
operator *	tools/utility/include/vector.h	/^MyVector<T> operator*(double c, const MyVector<T>& vector) {$/;"	f
operator *	tools/utility/src/matrix.cpp	/^Matrix2D<T> Matrix2D<T>::operator*(T c) const {$/;"	f	class:Matrix2D
operator *	tools/utility/src/matrix.cpp	/^Matrix2D<T> Matrix2D<T>::operator*(const Matrix2D<T>& rhs) const {$/;"	f	class:Matrix2D
operator *	tools/utility/tools/libcumatrix/include/device_arithmetic.h	/^dmat<T> operator * (const dmat<T>& A, const dvec<T>& v) {$/;"	f
operator *	tools/utility/tools/libcumatrix/include/device_arithmetic.h	/^dmat<T> operator * (const dvec<T>& col_vector, const dvec<T>& row_vector) {$/;"	f
operator *	tools/utility/tools/libcumatrix/include/device_arithmetic.h	/^dmat<T> operator * (const dvec<T>& v, const dmat<T>& A) {$/;"	f
operator *	tools/utility/tools/libcumatrix/include/device_matrix.h	/^      device_matrix<T> operator * (const Transposed& rhs) {$/;"	f	class:device_matrix::Transposed
operator *	tools/utility/tools/libcumatrix/include/device_matrix.h	/^      device_matrix<T> operator * (const device_matrix<T>& rhs) {$/;"	f	class:device_matrix::Transposed
operator *	tools/utility/tools/libcumatrix/include/device_matrix.h	/^device_matrix<T> operator * (T alpha, const device_matrix<T>& m) {$/;"	f
operator *=	tools/utility/include/vector.h	/^    MyVector<T>& operator *= (const T coeff) {$/;"	f	class:MyVector
operator *=	tools/utility/src/matrix.cpp	/^Matrix2D<T>& Matrix2D<T>::operator*=(T c) {$/;"	f	class:Matrix2D
operator *=	tools/utility/src/matrix.cpp	/^Matrix2D<T>& Matrix2D<T>::operator*=(const Matrix2D<T>& rhs) {$/;"	f	class:Matrix2D
operator +	include/batch.h	/^      iterator operator + (int n) const {$/;"	f	class:Batches::iterator
operator +	include/cnn-utility.h	/^  SIZE operator + (const SIZE& rhs) const { return SIZE(m - rhs.m, n - rhs.n); }$/;"	f	struct:SIZE
operator +	include/cnn-utility.h	/^  SIZE operator + (size_t x) const { return SIZE(m + x, n + x); }$/;"	f	struct:SIZE
operator +	tools/libcumatrix/include/device_matrix.h	/^      device_matrix<T> operator + (const device_matrix<T>& rhs) {$/;"	f	class:device_matrix::Transposed
operator +	tools/libcumatrix/include/device_matrix.h	/^device_matrix<T> operator + (T alpha, const device_matrix<T>& m) {$/;"	f
operator +	tools/utility/include/vector.h	/^    MyVector<T> operator + (const MyVector<T> v2) const {$/;"	f	class:MyVector
operator +	tools/utility/src/matrix.cpp	/^Matrix2D<T> Matrix2D<T>::operator+(T c) const {$/;"	f	class:Matrix2D
operator +	tools/utility/src/matrix.cpp	/^Matrix2D<T> Matrix2D<T>::operator+(const Matrix2D<T>& rhs) const {$/;"	f	class:Matrix2D
operator +	tools/utility/tools/libcumatrix/include/device_matrix.h	/^      device_matrix<T> operator + (const device_matrix<T>& rhs) {$/;"	f	class:device_matrix::Transposed
operator +	tools/utility/tools/libcumatrix/include/device_matrix.h	/^device_matrix<T> operator + (T alpha, const device_matrix<T>& m) {$/;"	f
operator ++	include/batch.h	/^      iterator operator ++ (int)  {$/;"	f	class:Batches::iterator
operator ++	include/batch.h	/^      iterator& operator ++ ()    {$/;"	f	class:Batches::iterator
operator +=	tools/utility/include/vector.h	/^    MyVector<T>& operator += (const MyVector<T> v2) {$/;"	f	class:MyVector
operator +=	tools/utility/src/matrix.cpp	/^Matrix2D<T>& Matrix2D<T>::operator+=(T c) {$/;"	f	class:Matrix2D
operator +=	tools/utility/src/matrix.cpp	/^Matrix2D<T>& Matrix2D<T>::operator+=(const Matrix2D<T>& rhs) {$/;"	f	class:Matrix2D
operator -	include/cnn-utility.h	/^  SIZE operator - (const SIZE& rhs) const { return SIZE(m - rhs.m, n - rhs.n); }$/;"	f	struct:SIZE
operator -	include/cnn-utility.h	/^  SIZE operator - (size_t x) const { return SIZE(m - x, n - x); }$/;"	f	struct:SIZE
operator -	tools/libcumatrix/include/device_matrix.h	/^      device_matrix<T> operator - (const device_matrix<T>& rhs) {$/;"	f	class:device_matrix::Transposed
operator -	tools/libcumatrix/include/device_matrix.h	/^device_matrix<T> operator - (T alpha, const device_matrix<T>& m) {$/;"	f
operator -	tools/utility/include/vector.h	/^    MyVector<T> operator - (const MyVector<T> v2) const {$/;"	f	class:MyVector
operator -	tools/utility/src/matrix.cpp	/^Matrix2D<T> Matrix2D<T>::operator-(T c) const {$/;"	f	class:Matrix2D
operator -	tools/utility/src/matrix.cpp	/^Matrix2D<T> Matrix2D<T>::operator-(const Matrix2D<T>& rhs) const {$/;"	f	class:Matrix2D
operator -	tools/utility/tools/libcumatrix/include/device_matrix.h	/^      device_matrix<T> operator - (const device_matrix<T>& rhs) {$/;"	f	class:device_matrix::Transposed
operator -	tools/utility/tools/libcumatrix/include/device_matrix.h	/^device_matrix<T> operator - (T alpha, const device_matrix<T>& m) {$/;"	f
operator -=	tools/utility/include/vector.h	/^    MyVector<T>& operator -= (const MyVector<T> v2) {$/;"	f	class:MyVector
operator -=	tools/utility/src/matrix.cpp	/^Matrix2D<T>& Matrix2D<T>::operator-=(T c) {$/;"	f	class:Matrix2D
operator -=	tools/utility/src/matrix.cpp	/^Matrix2D<T>& Matrix2D<T>::operator-=(const Matrix2D<T>& rhs) {$/;"	f	class:Matrix2D
operator ->	include/batch.h	/^      Batch* operator -> () const {$/;"	f	class:Batches::iterator
operator /	include/cnn-utility.h	/^  SIZE operator \/ (size_t x) const { return SIZE(m \/ x, n \/ x); }$/;"	f	struct:SIZE
operator /	tools/utility/include/vector.h	/^    MyVector<T> operator \/ (const T coeff) const {$/;"	f	class:MyVector
operator /	tools/utility/src/matrix.cpp	/^Matrix2D<T> Matrix2D<T>::operator\/(T c) const {$/;"	f	class:Matrix2D
operator /=	tools/utility/include/vector.h	/^    MyVector<T>& operator \/= (const T coeff) {$/;"	f	class:MyVector
operator /=	tools/utility/src/matrix.cpp	/^Matrix2D<T>& Matrix2D<T>::operator\/=(T c) {$/;"	f	class:Matrix2D
operator <	tools/utility/include/util.h	/^      bool operator < (const kvPair<T1, T2>& rhs) {$/;"	f	class:util::kvPair
operator <<	include/cnn-utility.h	/^  friend ostream& operator << (ostream& os, const SIZE& s) {$/;"	f	struct:SIZE
operator <<	include/cnn.h	/^  friend ostream& operator << (ostream& os, const MIMOFeatureTransform *ft) {$/;"	f	class:MIMOFeatureTransform
operator <<	src/rbm.cpp	/^ostream& operator << (ostream& os, const UNIT_TYPE& type) {$/;"	f
operator <<	tools/utility/include/array.h	/^fstream& operator << (fstream& fs, const Array<T>& arr) {$/;"	f
operator <=	tools/utility/include/util.h	/^      bool operator <= (const kvPair<T1, T2>& rhs) {$/;"	f	class:util::kvPair
operator =	include/batch.h	/^      iterator& operator = (iterator rhs) { \/\/modified \/\/fixed$/;"	f	class:Batches::iterator
operator =	include/host_matrix.h	/^  host_matrix& operator = (host_matrix<T> rhs) {$/;"	f	class:host_matrix
operator =	src/dataset.cpp	/^DataSet& DataSet::operator = (DataSet that) {$/;"	f	class:DataSet
operator =	src/dataset.cpp	/^DataStream& DataStream::operator = (DataStream that) {$/;"	f	class:DataStream
operator =	src/dnn.cpp	/^DNN& DNN::operator = (DNN rhs) {$/;"	f	class:DNN
operator =	tools/utility/include/array.h	/^  Array<T>& operator = (const Array<T>& arr) {$/;"	f	class:Array
operator =	tools/utility/include/util.h	/^      kvPair<T1, T2>& operator = (const kvPair<T1, T2>& source) {$/;"	f	class:util::kvPair
operator =	tools/utility/src/matrix.cpp	/^Matrix2D<T>& Matrix2D<T>::operator = (const Matrix2D<S>& rhs) {$/;"	f	class:Matrix2D
operator =	tools/utility/src/matrix.cpp	/^Matrix2D<T>& Matrix2D<T>::operator = (const Matrix2D<T>& rhs) {$/;"	f	class:Matrix2D
operator ==	include/batch.h	/^      bool operator == (const iterator& rhs) { return _batch->offset == rhs._batch->offset; }$/;"	f	class:Batches::iterator
operator ==	include/cnn-utility.h	/^  bool operator == (const SIZE& rhs) const { return m == rhs.m && n == rhs.n; }$/;"	f	struct:SIZE
operator ==	tools/utility/include/array.h	/^  bool operator == (const Array<T>& rhs) {$/;"	f	class:Array
operator >	tools/utility/include/util.h	/^      bool operator > (const kvPair<T1, T2>& rhs) {$/;"	f	class:util::kvPair
operator >=	tools/utility/include/util.h	/^      bool operator >= (const kvPair<T1, T2>& rhs) {$/;"	f	class:util::kvPair
operator []	include/host_matrix.h	/^  T& operator[] (size_t idx) {$/;"	f	class:host_matrix
operator []	include/host_matrix.h	/^  const T& operator[] (size_t idx) const {$/;"	f	class:host_matrix
operator []	src/dataset.cpp	/^BatchData DataSet::operator [] (const Batches::iterator& b) {  $/;"	f	class:DataSet
operator []	tools/utility/include/array.h	/^  T const& operator [] (size_t i) const {$/;"	f	class:Array
operator []	tools/utility/include/array.h	/^  T& operator [] (size_t i) {$/;"	f	class:Array
operator []	tools/utility/include/cmdparser.h	/^        AutoType operator[] (int argNumber) const {$/;"	f	class:CmdParser
operator []	tools/utility/include/cmdparser.h	/^        AutoType operator[] (string option) const {$/;"	f	class:CmdParser
operator []	tools/utility/src/matrix.cpp	/^T* & Matrix2D<T>::operator[](int row) { $/;"	f	class:Matrix2D
operator []	tools/utility/src/matrix.cpp	/^T* const& Matrix2D<T>::operator[](int row) const {$/;"	f	class:Matrix2D
operator bool	tools/utility/include/cmdparser.h	/^                operator bool   () { $/;"	f	class:CmdParser::AutoType
operator device_matrix<T>	include/host_matrix.h	/^  operator device_matrix<T> () const {$/;"	f	class:host_matrix
operator double	tools/utility/include/cmdparser.h	/^                operator double () { return str2double(_str); }$/;"	f	class:CmdParser::AutoType
operator float	tools/utility/include/cmdparser.h	/^                operator float  () { return str2float(_str); }$/;"	f	class:CmdParser::AutoType
operator int	tools/utility/include/cmdparser.h	/^                operator int    () { return str2int(_str); }$/;"	f	class:CmdParser::AutoType
operator size_t	tools/utility/include/cmdparser.h	/^                operator size_t () { return str2int(_str); }$/;"	f	class:CmdParser::AutoType
operator std::string	tools/utility/include/cmdparser.h	/^                operator std::string () { return _str; }$/;"	f	class:CmdParser::AutoType
operator std::vector<T>	tools/utility/include/array.h	/^  operator std::vector<T> () {$/;"	f	class:Array
operator ~	include/host_matrix.h	/^  host_matrix<T> operator ~ () const {$/;"	f	class:host_matrix
operator ~	tools/utility/src/matrix.cpp	/^Matrix2D<T> Matrix2D<T>::operator~() const {$/;"	f	class:Matrix2D
option	tools/utility/include/cmdparser.h	/^            string option;$/;"	m	struct:CmdParser::Arg
optional	tools/utility/include/cmdparser.h	/^            bool optional;$/;"	m	struct:CmdParser::Arg
out_net_in	src/dnn-train-graph.cpp	/^  string out_net_in; \/\/test$/;"	m	struct:TrainConfig	file:
parameter	tools/utility/include/cmdparser.h	/^            string parameter;$/;"	m	struct:CmdParser::Arg
parse	tools/utility/include/cmdparser.h	/^        bool parse() {$/;"	f	class:CmdParser
parseDimensions	src/rbm.cpp	/^vector<size_t> StackedRbm::parseDimensions($/;"	f	class:StackedRbm
parseInputDimension	src/cnn-utility.cu	/^SIZE parseInputDimension(const string &m_by_n) {$/;"	f
parseNetworkStructure	src/utility.cpp	/^void parseNetworkStructure(const string &structure,$/;"	f
parse_arg	src/dnn-train-graph.cpp	/^void parse_arg(string parms, Config& config, TrainConfig& setting) {$/;"	f
path	src/dnn-train-graph.cpp	/^  vector<string> path;$/;"	m	struct:TrainConfig	file:
perf	include/perf.h	/^namespace perf {$/;"	n
perf	tools/utility/include/perf.h	/^namespace perf {$/;"	n
plotL2normInSemilogy	src/cnn-utility.cu	/^void plotL2normInSemilogy() {$/;"	f
pop_back	tools/libcumatrix/include/cuda_memory_manager.h	/^  void pop_back() {$/;"	f	struct:MemList
pop_back	tools/utility/include/array.h	/^  void pop_back() {$/;"	f	class:Array
pop_back	tools/utility/tools/libcumatrix/include/cuda_memory_manager.h	/^  void pop_back() {$/;"	f	struct:MemList
pop_front	tools/utility/include/array.h	/^  void pop_front(){$/;"	f	class:Array
posteriorProb2Label	src/dnn-utility.cu	/^mat posteriorProb2Label(const mat& prob) {$/;"	f
print	include/host_matrix.h	/^  void print(FILE* fid = stdout) const {$/;"	f	class:host_matrix
print	include/utility.h	/^void print(const vector<T>& v) {$/;"	f
print	src/config.cpp	/^void Config::print() const {$/;"	f	class:Config
print	src/dataset.cpp	/^void StandardScore::print(FILE* fid) const {$/;"	f	class:StandardScore
print	src/dataset.cpp	/^void ZeroOne::print(FILE* fid) const {$/;"	f	class:ZeroOne
print	tools/libcumatrix/include/device_math.h	/^  void print(const thrust::device_vector<T>& v) {$/;"	f	namespace:ext
print	tools/libcumatrix/include/device_math.h	/^  void print(const thrust::host_vector<T>& v) {$/;"	f	namespace:ext
print	tools/utility/include/array.h	/^  void print(size_t element_per_line = 5) const {$/;"	f	class:Array
print	tools/utility/src/matrix.cpp	/^void Matrix2D<T>::print(int precision, FILE* fid) const {$/;"	f	class:Matrix2D
print	tools/utility/tools/libcumatrix/include/device_math.h	/^  void print(const thrust::device_vector<T>& v) {$/;"	f	namespace:ext
print	tools/utility/tools/libcumatrix/include/device_math.h	/^  void print(const thrust::host_vector<T>& v) {$/;"	f	namespace:ext
printArgs	tools/utility/include/cmdparser.h	/^        void printArgs() const {$/;"	f	class:CmdParser
printDiag	tools/utility/src/matrix.cpp	/^void Matrix2D<T>::printDiag(int precision) const {$/;"	f	class:Matrix2D
printLabels	src/dnn-predict.cpp	/^void printLabels(const mat& prob, FILE* fid, int base) {$/;"	f
ptrs	tools/libcumatrix/include/cuda_memory_manager.h	/^  std::vector<T*> ptrs;$/;"	m	struct:MemList
ptrs	tools/utility/tools/libcumatrix/include/cuda_memory_manager.h	/^  std::vector<T*> ptrs;$/;"	m	struct:MemList
push	tools/libcumatrix/src/cuda_memory_manager.cpp	/^void CudaMemManager<T>::push(size_t size, T* ptr) {$/;"	f	class:CudaMemManager
push	tools/utility/tools/libcumatrix/src/cuda_memory_manager.cpp	/^void CudaMemManager<T>::push(size_t size, T* ptr) {$/;"	f	class:CudaMemManager
push_back	tools/libcumatrix/include/cuda_memory_manager.h	/^  void push_back(T* ptr) {$/;"	f	struct:MemList
push_back	tools/utility/include/array.h	/^  void push_back(const T& x) {$/;"	f	class:Array
push_back	tools/utility/tools/libcumatrix/include/cuda_memory_manager.h	/^  void push_back(T* ptr) {$/;"	f	struct:MemList
rand	src/dnn-utility.cu	/^mat rand(int m, int n) {$/;"	f
rand	tools/libcumatrix/include/device_math.h	/^  void rand(device_matrix<T>& m) {$/;"	f	namespace:ext
rand	tools/libcumatrix/include/math_ext.h	/^  std::vector<T> rand(size_t size) {$/;"	f	namespace:ext
rand	tools/utility/tools/libcumatrix/include/device_math.h	/^  void rand(device_matrix<T>& m) {$/;"	f	namespace:ext
rand	tools/utility/tools/libcumatrix/include/math_ext.h	/^  std::vector<T> rand(size_t size) {$/;"	f	namespace:ext
rand01	tools/libcumatrix/include/math_ext.h	/^  T rand01() {$/;"	f	namespace:ext
rand01	tools/utility/tools/libcumatrix/include/math_ext.h	/^  T rand01() {$/;"	f	namespace:ext
randn	src/dnn-utility.cu	/^mat randn(int m, int n) {$/;"	f
randn	tools/libcumatrix/include/device_math.h	/^  void randn(device_matrix<T>& m, float mean = 0.0, float variance = 1.0) {$/;"	f	namespace:ext
randn	tools/libcumatrix/include/math_ext.h	/^  T randn(T mean, T var) {$/;"	f	namespace:ext
randn	tools/libcumatrix/include/math_ext.h	/^  std::vector<T> randn(size_t size) {$/;"	f	namespace:ext
randn	tools/utility/tools/libcumatrix/include/device_math.h	/^  void randn(device_matrix<T>& m, float mean = 0.0, float variance = 1.0) {$/;"	f	namespace:ext
randn	tools/utility/tools/libcumatrix/include/math_ext.h	/^  T randn(T mean, T var) {$/;"	f	namespace:ext
randn	tools/utility/tools/libcumatrix/include/math_ext.h	/^  std::vector<T> randn(size_t size) {$/;"	f	namespace:ext
randomInit	tools/libcumatrix/benchmark.cpp	/^void randomInit(device_matrix<T>& m) {$/;"	f
randomInit	tools/libcumatrix/example1.cpp	/^void randomInit(device_matrix<T>& m) {$/;"	f
randomInit	tools/libcumatrix/example2.cu	/^void randomInit(mat& m) {$/;"	f
randomInit	tools/libcumatrix/example2.cu	/^void randomInit(vec& v) {$/;"	f
randomInit	tools/utility/tools/libcumatrix/benchmark.cpp	/^void randomInit(device_matrix<T>& m) {$/;"	f
randomInit	tools/utility/tools/libcumatrix/example1.cpp	/^void randomInit(device_matrix<T>& m) {$/;"	f
randomInit	tools/utility/tools/libcumatrix/example2.cu	/^void randomInit(mat& m) {$/;"	f
randomInit	tools/utility/tools/libcumatrix/example2.cu	/^void randomInit(vec& v) {$/;"	f
randomgenerator	tools/libcumatrix/include/math_ext.h	/^  namespace randomgenerator {$/;"	n	namespace:ext
randomgenerator	tools/utility/tools/libcumatrix/include/math_ext.h	/^  namespace randomgenerator {$/;"	n	namespace:ext
randperm	include/config.h	/^  bool randperm;$/;"	m	struct:Config
randperm	src/utility.cpp	/^std::vector<size_t> randperm(size_t N) {$/;"	f
ratio	src/dnn-train-graph.cpp	/^  int ratio;$/;"	m	struct:TrainConfig	file:
rbm_train	src/rbm.cpp	/^void StackedRbm::rbm_train(DataSet& data, int layer, UNIT_TYPE vis_type, UNIT_TYPE hid_type) {$/;"	f	class:StackedRbm
read	src/cnn.cpp	/^void CNN::read(const string &fn) {$/;"	f	class:CNN
read	src/dnn.cpp	/^void DNN::read(string fn) {$/;"	f	class:DNN
read	src/feature-transform.cpp	/^void Activation::read(FILE* fid) {$/;"	f	class:Activation
read	src/feature-transform.cpp	/^void AffineTransform::read(FILE* fid) {$/;"	f	class:AffineTransform
readAsBinary	tools/utility/include/array.h	/^  void readAsBinary(string filename) {$/;"	f	class:Array
readAsBinary	tools/utility/src/matrix.cpp	/^void Matrix2D<T>::readAsBinary(string filename) {$/;"	f	class:Matrix2D
readDenseFeature	src/dataset.cpp	/^void readDenseFeature(DataStream& stream, int N, size_t dim, size_t base, BatchData& data) {$/;"	f
readMoreFeature	src/dataset.cpp	/^BatchData readMoreFeature(DataStream& stream, int N, size_t dim, size_t base, bool sparse) {$/;"	f
readSparseFeature	src/dataset.cpp	/^void readSparseFeature(DataStream& stream, int N, size_t dim, size_t base, BatchData& data) {$/;"	f
refresh	tools/utility/src/pbar.cpp	/^void ProgressBar::refresh(double percentage) {$/;"	f	class:ProgressBar
refresh	tools/utility/src/pbar.cpp	/^void ProgressBar::refresh(double percentage, string status) {$/;"	f	class:ProgressBar
refresh	tools/utility/src/pbar.cpp	/^void ProgressBar::refresh(size_t i, size_t N) {$/;"	f	class:ProgressBar
refresh	tools/utility/src/pbar.cpp	/^void ProgressBar::refresh(size_t i, size_t N, string status) {$/;"	f	class:ProgressBar
register_device_matrix_utility	src/dnn-utility.cu	407;"	d	file:
replace_all	tools/utility/include/cmdparser.h	/^        static string replace_all(const string& str, const string &token, const string &s) {$/;"	f	class:CmdParser
reserve	include/host_matrix.h	/^  void reserve(size_t capacity) {$/;"	f	class:host_matrix
reserve	tools/utility/include/array.h	/^  void reserve(size_t capacity) {$/;"	f	class:Array
reset	include/perf.h	/^      void reset()        { timer->reset(); }$/;"	f	class:perf::Timer
reset	tools/utility/include/perf.h	/^      void reset()	{ timer->reset(); }$/;"	f	class:perf::Timer
reshapeVectors2Images	src/cnn-utility.cu	/^vector<mat> reshapeVectors2Images(const mat& data, const SIZE s) {$/;"	f
resize	include/host_matrix.h	/^  void resize(size_t r, size_t c) {$/;"	f	class:host_matrix
resize	tools/utility/include/array.h	/^  void resize(size_t n) {$/;"	f	class:Array
resize	tools/utility/src/matrix.cpp	/^void Matrix2D<T>::resize(int rows, int cols) {$/;"	f	class:Matrix2D
reverse	tools/utility/include/array.h	/^  void reverse() {$/;"	f	class:Array
rewind	src/dataset.cpp	/^void DataSet::rewind() {$/;"	f	class:DataSet
rewind	src/dataset.cpp	/^void DataStream::rewind() {$/;"	f	class:DataStream
rot180	src/cnn-utility.cu	/^mat rot180(const mat& x) {$/;"	f
row_sorting	tools/utility/src/matrix.cpp	/^void Matrix2D<T>::row_sorting(int pivot_column) {$/;"	f	class:Matrix2D
sample	src/dnn-utility.cu	/^void sample(mat &prob, UNIT_TYPE type) {$/;"	f
sampleDataFrom	tools/libcumatrix/include/math_ext.h	/^  std::vector<size_t> sampleDataFrom(const std::vector<T>& pdf, size_t nSample) {$/;"	f	namespace:ext
sampleDataFrom	tools/utility/tools/libcumatrix/include/math_ext.h	/^  std::vector<size_t> sampleDataFrom(const std::vector<T>& pdf, size_t nSample) {$/;"	f	namespace:ext
sample_bernoulli	src/dnn-utility.cu	/^inline __device__ void sample_bernoulli(float& x, curandState* state) {$/;"	f
sample_gaussian	src/dnn-utility.cu	/^inline __device__ void sample_gaussian(float& x, curandState* state) {$/;"	f
save	src/cnn.cpp	/^void CNN::save(const string &fn) const {$/;"	f	class:CNN
save	src/dnn.cpp	/^void DNN::save(string fn) const {$/;"	f	class:DNN
save	src/rbm.cpp	/^void StackedRbm::save(const string& fn) {$/;"	f	class:StackedRbm
save	tools/libcumatrix/include/device_math.h	/^  void save(const thrust::device_vector<T>& v, string filename) {$/;"	f	namespace:ext
save	tools/libcumatrix/include/math_ext.h	/^  void save(const std::vector<T>& v, std::string filename) {$/;"	f	namespace:ext
save	tools/utility/tools/libcumatrix/include/device_math.h	/^  void save(const thrust::device_vector<T>& v, string filename) {$/;"	f	namespace:ext
save	tools/utility/tools/libcumatrix/include/math_ext.h	/^  void save(const std::vector<T>& v, std::string filename) {$/;"	f	namespace:ext
saveAsBinary	tools/utility/include/array.h	/^  void saveAsBinary(string filename) const {$/;"	f	class:Array
saveAsBinary	tools/utility/src/matrix.cpp	/^void Matrix2D<T>::saveAsBinary(string filename) const {$/;"	f	class:Matrix2D
saveas	tools/utility/include/array.h	/^  void saveas(string filename) {$/;"	f	class:Array
saveas	tools/utility/src/matrix.cpp	/^void Matrix2D<T>::saveas(string filename, int precision) const {$/;"	f	class:Matrix2D
setCacheSize	tools/libcumatrix/src/cuda_memory_manager.cpp	/^void CudaMemManager<T>::setCacheSize(size_t cache_size_in_MB) {$/;"	f	class:CudaMemManager
setCacheSize	tools/utility/tools/libcumatrix/src/cuda_memory_manager.cpp	/^void CudaMemManager<T>::setCacheSize(size_t cache_size_in_MB) {$/;"	f	class:CudaMemManager
setConfig	include/dnn-graph.h	/^  void setConfig(const Config& config) { _config = config; }$/;"	f	class:DNNGraph
setConfig	src/dnn.cpp	/^void DNN::setConfig(const Config& config) {$/;"	f	class:DNN
setCudaStream	tools/libcumatrix/src/device_matrix.cu	/^void device_matrix<T>::setCudaStream(cudaStream_t& streamId) {$/;"	f	class:T
setCudaStream	tools/utility/tools/libcumatrix/src/device_matrix.cu	/^void device_matrix<T>::setCudaStream(cudaStream_t& streamId) {$/;"	f	class:T
setDimension	src/dataset.cpp	/^void DataSet::setDimension(size_t dim) {$/;"	f	class:DataSet
setLabelBase	src/dataset.cpp	/^void DataSet::setLabelBase(int base) {$/;"	f	class:DataSet
setNormType	src/dataset.cpp	/^void DataSet::setNormType(NormType type) {$/;"	f	class:DataSet
set_input_img_size	include/cnn.h	/^  void set_input_img_size(const SIZE& s) { _input_img_size = s; }$/;"	f	class:MIMOFeatureTransform
set_sparse	src/dataset.cpp	/^void DataSet::set_sparse(bool sparse) {$/;"	f	class:DataSet
setupCuRandState	src/dnn-utility.cu	/^__global__ void setupCuRandState( curandState * state, unsigned long seed ) {$/;"	f
showAccuracy	src/utility.cpp	/^void showAccuracy(size_t nError, size_t nTotal) {$/;"	f
showAll	tools/utility/include/cmdparser.h	/^        void showAll() {$/;"	f	class:CmdParser
showCacheHits	tools/libcumatrix/src/cuda_memory_manager.cpp	/^void CudaMemManager<T>::showCacheHits() {$/;"	f	class:CudaMemManager
showCacheHits	tools/utility/tools/libcumatrix/src/cuda_memory_manager.cpp	/^void CudaMemManager<T>::showCacheHits() {$/;"	f	class:CudaMemManager
showImage	src/cnn-utility.cu	/^void showImage(const mat& x) {$/;"	f
showSummary	src/dataset.cpp	/^void DataSet::showSummary() const {$/;"	f	class:DataSet
showUsageAndExit	tools/utility/include/cmdparser.h	/^        void showUsageAndExit() const {$/;"	f	class:CmdParser
sigmoid	tools/libcumatrix/include/math_ext.h	/^  std::vector<T> sigmoid(const std::vector<T>& x) {$/;"	f	namespace:ext
sigmoid	tools/utility/tools/libcumatrix/include/math_ext.h	/^  std::vector<T> sigmoid(const std::vector<T>& x) {$/;"	f	namespace:ext
size	include/batch.h	/^  size_t size() const { return ceil((float) _totalSize \/ _batchSize); }$/;"	f	class:Batches
size	include/host_matrix.h	/^  size_t size() const { return _rows * _cols; }$/;"	f	class:host_matrix
size	src/dataset.cpp	/^size_t DataSet::size() const {$/;"	f	class:DataSet
size	tools/libcumatrix/include/cuda_memory_manager.h	/^  size_t size() const {$/;"	f	struct:MemList
size	tools/libcumatrix/include/device_matrix.h	/^  size_t size() const { return _rows * _cols; }$/;"	f	class:device_matrix
size	tools/libcumatrix/src/cuda_memory_manager.cpp	/^size_t CudaMemManager<T>::size() const {$/;"	f	class:CudaMemManager
size	tools/utility/include/array.h	/^  size_t size() const {$/;"	f	class:Array
size	tools/utility/include/matrix.h	/^    size_t size() const { return _rows * _cols; }$/;"	f	class:Matrix2D
size	tools/utility/tools/libcumatrix/include/cuda_memory_manager.h	/^  size_t size() const {$/;"	f	struct:MemList
size	tools/utility/tools/libcumatrix/include/device_matrix.h	/^  size_t size() const { return _rows * _cols; }$/;"	f	class:device_matrix
size	tools/utility/tools/libcumatrix/src/cuda_memory_manager.cpp	/^size_t CudaMemManager<T>::size() const {$/;"	f	class:CudaMemManager
softmax	tools/libcumatrix/include/math_ext.h	/^  std::vector<T> softmax(const std::vector<T>& x) {$/;"	f	namespace:ext
softmax	tools/utility/tools/libcumatrix/include/math_ext.h	/^  std::vector<T> softmax(const std::vector<T>& x) {$/;"	f	namespace:ext
sort	tools/utility/include/sorting.h	/^      static void sort(Array<T> &arr, sortingOrder order) {$/;"	f	class:util::sorting
sort	tools/utility/include/sorting.h	/^      static void sort(Array<T> &arr, sortingOrder order, Array<int> &permutation) {$/;"	f	class:util::sorting
sort_memlist_by_hit_rate	tools/libcumatrix/src/cuda_memory_manager.cpp	/^std::vector<size_t> CudaMemManager<T>::sort_memlist_by_hit_rate() {$/;"	f	class:CudaMemManager
sort_memlist_by_hit_rate	tools/utility/tools/libcumatrix/src/cuda_memory_manager.cpp	/^std::vector<size_t> CudaMemManager<T>::sort_memlist_by_hit_rate() {$/;"	f	class:CudaMemManager
sort_memlist_by_hits	tools/libcumatrix/src/cuda_memory_manager.cpp	/^std::vector<size_t> CudaMemManager<T>::sort_memlist_by_hits() {$/;"	f	class:CudaMemManager
sort_memlist_by_hits	tools/utility/tools/libcumatrix/src/cuda_memory_manager.cpp	/^std::vector<size_t> CudaMemManager<T>::sort_memlist_by_hits() {$/;"	f	class:CudaMemManager
sorting	tools/utility/include/sorting.h	/^      sorting() {}$/;"	f	class:util::sorting
sorting	tools/utility/include/sorting.h	/^  class sorting {$/;"	c	namespace:util
sortingOrder	tools/utility/include/sorting.h	/^      enum sortingOrder {$/;"	g	class:util::sorting
split	src/dataset.cpp	/^void DataSet::split( const DataSet& data, DataSet& train, DataSet& valid, int ratio) {$/;"	f	class:DataSet
split	src/dnn.cpp	/^void DNN::split(DNN& full_net, DNN& input_net, DNN& hidden_net, DNN& out_net, vector<size_t> layer_spec_vec) { \/\/New method$/;"	f	class:DNN
split	src/utility.cpp	/^std::vector<std::string> split(const std::string &s, char delim) {$/;"	f
split	src/utility.cpp	/^std::vector<std::string>& split(const std::string &s, char delim, std::vector<std::string>& elems) {$/;"	f
splitAsInt	src/utility.cpp	/^std::vector<size_t> splitAsInt(const std::string &s, char delim) {$/;"	f
square	tools/libcumatrix/example2.cu	/^struct square {$/;"	s	file:
square	tools/utility/tools/libcumatrix/example2.cu	/^struct square {$/;"	s	file:
srander	tools/libcumatrix/include/math_ext.h	/^    inline time_t srander() {$/;"	f	namespace:ext::randomgenerator
srander	tools/utility/tools/libcumatrix/include/math_ext.h	/^    inline time_t srander() {$/;"	f	namespace:ext::randomgenerator
ss2int	tools/utility/src/util.cpp	/^  int ss2int(stringstream &ss) {$/;"	f	namespace:util
start	include/perf.h	/^      void start()        { timer->start(); }$/;"	f	class:perf::Timer
start	tools/libcumatrix/benchmark.cpp	/^  cudaEvent_t start, stop;$/;"	m	struct:Timer	file:
start	tools/utility/include/perf.h	/^      void start()	{ timer->start(); }$/;"	f	class:perf::Timer
start	tools/utility/tools/libcumatrix/benchmark.cpp	/^  cudaEvent_t start, stop;$/;"	m	struct:Timer	file:
stat	src/dataset.cpp	/^void StandardScore::stat(DataSet& data) {$/;"	f	class:StandardScore
stat	src/dataset.cpp	/^void ZeroOne::stat(DataSet& data) {$/;"	f	class:ZeroOne
status	src/cnn.cpp	/^void CNN::status() const {$/;"	f	class:CNN
status	src/cnn.cpp	/^void ConvolutionalLayer::status() const {$/;"	f	class:ConvolutionalLayer
status	src/cnn.cpp	/^void SubSamplingLayer::status() const {$/;"	f	class:SubSamplingLayer
status	src/dnn.cpp	/^void DNN::status() const {$/;"	f	class:DNN
status	tools/libcumatrix/include/device_matrix.h	/^  void status() const {$/;"	f	class:device_matrix
status	tools/utility/tools/libcumatrix/include/device_matrix.h	/^  void status() const {$/;"	f	class:device_matrix
std	tools/libcumatrix/example2.cu	/^using namespace std;$/;"	v
std	tools/utility/tools/libcumatrix/example2.cu	/^using namespace std;$/;"	v
stop	include/perf.h	/^      void stop()        { timer->stop();  }$/;"	f	class:perf::Timer
stop	tools/libcumatrix/benchmark.cpp	/^  cudaEvent_t start, stop;$/;"	m	struct:Timer	file:
stop	tools/utility/include/perf.h	/^      void stop()	{ timer->stop();  }$/;"	f	class:perf::Timer
stop	tools/utility/tools/libcumatrix/benchmark.cpp	/^  cudaEvent_t start, stop;$/;"	m	struct:Timer	file:
str2bool	tools/utility/src/util.cpp	/^  bool str2bool(string str) {$/;"	f	namespace:util
str2double	tools/utility/include/cmdparser.h	/^        static double str2double(string str) {$/;"	f	class:CmdParser
str2double	tools/utility/src/util.cpp	/^  double str2double(string str) {$/;"	f	namespace:util
str2float	src/utility.cpp	/^float str2float(const std::string &s) {$/;"	f
str2float	tools/utility/include/cmdparser.h	/^        static float str2float(string str) {$/;"	f	class:CmdParser
str2int	src/utility.cpp	/^int str2int(const std::string &s) {$/;"	f
str2int	tools/utility/include/cmdparser.h	/^        static int str2int(string str) {$/;"	f	class:CmdParser
str2int	tools/utility/src/util.cpp	/^  int str2int(string str) {$/;"	f	namespace:util
str2longdouble	tools/utility/src/util.cpp	/^  long double str2longdouble(string str) {$/;"	f	namespace:util
substract_max_per_row_kernel	src/dnn-utility.cu	/^__global__ void substract_max_per_row_kernel(T* const A, T* const rmax, unsigned int rows, unsigned int cols) {$/;"	f
sum	tools/libcumatrix/include/device_math.h	/^  T sum(const device_matrix<T>& m) {$/;"	f	namespace:ext
sum	tools/libcumatrix/include/device_math.h	/^  T sum(const thrust::device_vector<T>& v) {$/;"	f	namespace:ext
sum	tools/libcumatrix/include/math_ext.h	/^  T sum(const std::vector<T>& v) {$/;"	f	namespace:ext
sum	tools/utility/tools/libcumatrix/include/device_math.h	/^  T sum(const device_matrix<T>& m) {$/;"	f	namespace:ext
sum	tools/utility/tools/libcumatrix/include/device_math.h	/^  T sum(const thrust::device_vector<T>& v) {$/;"	f	namespace:ext
sum	tools/utility/tools/libcumatrix/include/math_ext.h	/^  T sum(const std::vector<T>& v) {$/;"	f	namespace:ext
sum_all	src/cnn-utility.cu	/^float sum_all(const mat& x) {$/;"	f
swap	include/dataset.h	/^  friend void swap(DataSet& a, DataSet& b) {$/;"	f	class:DataSet
swap	include/host_matrix.h	/^void swap(host_matrix<T>& lhs, host_matrix<T>& rhs) {$/;"	f
swap	src/batch.cpp	/^void swap(Batches::iterator& lhs, Batches::iterator& rhs) {$/;"	f
swap	src/dataset.cpp	/^void swap(DataStream& a, DataStream& b) { $/;"	f
swap	src/dnn.cpp	/^void swap(DNN& lhs, DNN& rhs) {$/;"	f
swap	tools/libcumatrix/include/device_matrix.h	/^void swap(device_matrix<T>& lhs, device_matrix<T>& rhs) {$/;"	f
swap	tools/utility/include/util.h	/^  void swap(T& a, T& b) {$/;"	f	namespace:util
swap	tools/utility/tools/libcumatrix/include/device_matrix.h	/^void swap(device_matrix<T>& lhs, device_matrix<T>& rhs) {$/;"	f
system	tools/utility/src/util.cpp	/^  void system(string command) {$/;"	f	namespace:util
test_convn	src/cnn-utility.cu	/^void test_convn(string type) {$/;"	f
test_convn_with_and_without_shm	src/cnn-utility.cu	/^void test_convn_with_and_without_shm(string type, const int N) {$/;"	f
test_downsample	src/cnn-utility.cu	/^void test_downsample() {$/;"	f
test_reshape_images_between_vectors	src/cnn-utility.cu	/^void test_reshape_images_between_vectors() {$/;"	f
test_valid_shm_vs_valid_2	src/cnn-utility.cu	/^void test_valid_shm_vs_valid_2() {$/;"	f
tic	tools/libcumatrix/benchmark.cpp	/^void Timer::tic() {$/;"	f	class:Timer
tic	tools/utility/src/profile.cpp	/^void Profile::tic() {$/;"	f	class:Profile
tic	tools/utility/tools/libcumatrix/benchmark.cpp	/^void Timer::tic() {$/;"	f	class:Timer
timer	include/perf.h	/^      StopWatchInterface* timer;$/;"	m	class:perf::Timer
timer	tools/utility/include/perf.h	/^      StopWatchInterface* timer;$/;"	m	class:perf::Timer
toStlVector	tools/libcumatrix/include/device_math.h	/^  vector<T> toStlVector(const thrust::device_vector<T>& v) {$/;"	f	namespace:ext
toStlVector	tools/utility/tools/libcumatrix/include/device_math.h	/^  vector<T> toStlVector(const thrust::device_vector<T>& v) {$/;"	f	namespace:ext
toString	src/feature-transform.cpp	/^string AffineTransform::toString() const {$/;"	f	class:AffineTransform
toString	src/feature-transform.cpp	/^string Sigmoid::toString() const {$/;"	f	class:Sigmoid
toString	src/feature-transform.cpp	/^string Softmax::toString() const {$/;"	f	class:Softmax
to_string	include/utility.h	/^string to_string(T n) {$/;"	f
toc	tools/libcumatrix/benchmark.cpp	/^float Timer::toc() {$/;"	f	class:Timer
toc	tools/utility/src/profile.cpp	/^double Profile::toc() {$/;"	f	class:Profile
toc	tools/utility/tools/libcumatrix/benchmark.cpp	/^float Timer::toc() {$/;"	f	class:Timer
train	src/rbm.cpp	/^void StackedRbm::train(DataSet& data) {$/;"	f	class:StackedRbm
trainValidRatio	include/config.h	/^  size_t trainValidRatio;$/;"	m	struct:Config
train_fn	src/dnn-train-graph.cpp	/^  string train_fn;$/;"	m	struct:TrainConfig	file:
train_program	src/dnn-train-graph.cpp	/^  string train_program;$/;"	m	struct:TrainConfig	file:
transform	include/dnn-utility.h	/^device_matrix<T> transform(const device_matrix<T>& x, UnaryFunction op) {$/;"	f
type	tools/libcumatrix/include/cuda_memory_manager.h	/^  typedef typename std::map<size_t, MemList<T> > type;$/;"	t	struct:MemPool
type	tools/utility/tools/libcumatrix/include/cuda_memory_manager.h	/^  typedef typename std::map<size_t, MemList<T> > type;$/;"	t	struct:MemPool
unif	tools/libcumatrix/include/math_ext.h	/^  T unif(T &seed) {$/;"	f	namespace:ext
unif	tools/utility/tools/libcumatrix/include/math_ext.h	/^  T unif(T &seed) {$/;"	f	namespace:ext
unknown	tools/utility/include/cmdparser.h	/^        bool unknown(string opt) {$/;"	f	class:CmdParser
up_propagate	src/rbm.cpp	/^void StackedRbm::up_propagate(const mat& W, const mat& visible, mat& hidden, UNIT_TYPE type) {$/;"	f	class:StackedRbm
upsample	src/cnn-utility.cu	/^mat upsample(const mat& x, SIZE s) {$/;"	f
upsample	src/cnn-utility.cu	/^mat upsample(const mat& x, SIZE s, SIZE img) {$/;"	f
upsample	src/cnn-utility.cu	/^mat upsample(const mat& x, size_t scale) {$/;"	f
upsample_kernel	src/cnn-utility.cu	/^__global__ void upsample_kernel(float *dst, float *src, int h, int w, int H, int W) { $/;"	f
util	tools/utility/include/sorting.h	/^namespace util {$/;"	n
util	tools/utility/include/util.h	/^namespace util {$/;"	n
util	tools/utility/src/util.cpp	/^namespace util {$/;"	n	file:
vec	tools/libcumatrix/example2.cu	/^typedef thrust::device_vector<float> vec;$/;"	t	class:thrust	file:
vec	tools/utility/include/vector.h	/^typedef MyVector<double> vec;$/;"	t
vec	tools/utility/tools/libcumatrix/example2.cu	/^typedef thrust::device_vector<float> vec;$/;"	t	class:thrust	file:
what	tools/utility/include/util.h	/^      const char* what() const { return m_strError.c_str(); }$/;"	f	class:util::MyException
write	src/feature-transform.cpp	/^void Activation::write(FILE* fid) const {$/;"	f	class:Activation
write	src/feature-transform.cpp	/^void AffineTransform::write(FILE* fid) const {$/;"	f	class:AffineTransform
x	include/dataset.h	/^  hmat x, y;$/;"	m	struct:BatchData
y	include/dataset.h	/^  hmat x, y;$/;"	m	struct:BatchData
zeroOneError	src/dnn-utility.cu	/^size_t zeroOneError(const mat& prob, const mat& label, ERROR_MEASURE errorMeasure) {$/;"	f
zeros	include/dnn-utility.h	/^inline mat zeros(int m, int n) { return mat(m, n, 0); }$/;"	f
~Array	tools/utility/include/array.h	/^  ~Array() {$/;"	f	class:Array
~CNN	src/cnn.cpp	/^CNN::~CNN() {$/;"	f	class:CNN
~CUBLAS_HANDLE	tools/libcumatrix/include/device_matrix.h	/^  ~CUBLAS_HANDLE() { CCE(cublasDestroy(_handle)); }$/;"	f	class:CUBLAS_HANDLE
~CUBLAS_HANDLE	tools/utility/tools/libcumatrix/include/device_matrix.h	/^  ~CUBLAS_HANDLE() { CCE(cublasDestroy(_handle)); }$/;"	f	class:CUBLAS_HANDLE
~CURAND_STATE	src/dnn-utility.cu	/^CURAND_STATE::~CURAND_STATE() {$/;"	f	class:CURAND_STATE
~CudaMemManager	tools/libcumatrix/include/cuda_memory_manager.h	/^  ~CudaMemManager() {}$/;"	f	class:CudaMemManager
~CudaMemManager	tools/utility/tools/libcumatrix/include/cuda_memory_manager.h	/^  ~CudaMemManager() {}$/;"	f	class:CudaMemManager
~DNN	src/dnn.cpp	/^DNN::~DNN() { \/\/Modified$/;"	f	class:DNN
~DataSet	src/dataset.cpp	/^DataSet::~DataSet() {$/;"	f	class:DataSet
~DataStream	src/dataset.cpp	/^DataStream::~DataStream() {$/;"	f	class:DataStream
~Matrix2D	tools/utility/src/matrix.cpp	/^Matrix2D<T>::~Matrix2D() {$/;"	f	class:Matrix2D
~SCALAR_MEMORY_BUFFER	tools/libcumatrix/include/device_matrix.h	/^  ~SCALAR_MEMORY_BUFFER() { CCE(cudaFree(_ptr)); }$/;"	f	class:SCALAR_MEMORY_BUFFER
~SCALAR_MEMORY_BUFFER	tools/utility/tools/libcumatrix/include/device_matrix.h	/^  ~SCALAR_MEMORY_BUFFER() { CCE(cudaFree(_ptr)); }$/;"	f	class:SCALAR_MEMORY_BUFFER
~Timer	include/perf.h	/^      ~Timer() { sdkDeleteTimer(&timer); }$/;"	f	class:perf::Timer
~Timer	tools/utility/include/perf.h	/^      ~Timer() { sdkDeleteTimer(&timer); }$/;"	f	class:perf::Timer
~device_matrix	tools/libcumatrix/src/device_matrix.cu	/^device_matrix<T>::~device_matrix() {$/;"	f	class:T
~device_matrix	tools/utility/tools/libcumatrix/src/device_matrix.cu	/^device_matrix<T>::~device_matrix() {$/;"	f	class:T
~host_matrix	include/host_matrix.h	/^  ~host_matrix() {$/;"	f	class:host_matrix
~iterator	include/batch.h	/^      ~iterator() { delete _batch; }$/;"	f	class:Batches::iterator
